

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Tester\App.config"
//     Connection String Name: "MyDbContext"
//     Connection String:      "Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=win81)(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=XE)));User Id=efpoco;password=**zapped**;"
// ------------------------------------------------------------------------------------------------
// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace TestDatabaseNoDataAnnotation
{
    using System.Linq;

    #region Unit of work

    public partial interface ITestDatabaseNoDataAnnotationDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<CountRy> CountRies { get; set; } // COUNTRIES
        System.Data.Entity.DbSet<Department> Departments { get; set; } // DEPARTMENTS
        System.Data.Entity.DbSet<Employee> Employees { get; set; } // EMPLOYEES
        System.Data.Entity.DbSet<Job> Jobs { get; set; } // JOBS
        System.Data.Entity.DbSet<JobHistory> JobHistories { get; set; } // JOB_HISTORY
        System.Data.Entity.DbSet<Location> Locations { get; set; } // LOCATIONS
        System.Data.Entity.DbSet<Region> Regions { get; set; } // REGIONS
        System.Data.Entity.DbSet<TypeCharTable> TypeCharTables { get; set; } // TYPE_CHAR_TABLE
        System.Data.Entity.DbSet<TypeDateTable> TypeDateTables { get; set; } // TYPE_DATE_TABLE
        System.Data.Entity.DbSet<TypeNumTable> TypeNumTables { get; set; } // TYPE_NUM_TABLE

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TestDatabaseNoDataAnnotationDbContext : System.Data.Entity.DbContext, ITestDatabaseNoDataAnnotationDbContext
    {
        public System.Data.Entity.DbSet<CountRy> CountRies { get; set; } // COUNTRIES
        public System.Data.Entity.DbSet<Department> Departments { get; set; } // DEPARTMENTS
        public System.Data.Entity.DbSet<Employee> Employees { get; set; } // EMPLOYEES
        public System.Data.Entity.DbSet<Job> Jobs { get; set; } // JOBS
        public System.Data.Entity.DbSet<JobHistory> JobHistories { get; set; } // JOB_HISTORY
        public System.Data.Entity.DbSet<Location> Locations { get; set; } // LOCATIONS
        public System.Data.Entity.DbSet<Region> Regions { get; set; } // REGIONS
        public System.Data.Entity.DbSet<TypeCharTable> TypeCharTables { get; set; } // TYPE_CHAR_TABLE
        public System.Data.Entity.DbSet<TypeDateTable> TypeDateTables { get; set; } // TYPE_DATE_TABLE
        public System.Data.Entity.DbSet<TypeNumTable> TypeNumTables { get; set; } // TYPE_NUM_TABLE

        static TestDatabaseNoDataAnnotationDbContext()
        {
            System.Data.Entity.Database.SetInitializer<TestDatabaseNoDataAnnotationDbContext>(null);
        }

        public TestDatabaseNoDataAnnotationDbContext()
            : base("Name=MyDbContext")
        {
            InitializePartial();
        }

        public TestDatabaseNoDataAnnotationDbContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public TestDatabaseNoDataAnnotationDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public TestDatabaseNoDataAnnotationDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public TestDatabaseNoDataAnnotationDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            DisposePartial(disposing);
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new CountRyConfiguration());
            modelBuilder.Configurations.Add(new DepartmentConfiguration());
            modelBuilder.Configurations.Add(new EmployeeConfiguration());
            modelBuilder.Configurations.Add(new JobConfiguration());
            modelBuilder.Configurations.Add(new JobHistoryConfiguration());
            modelBuilder.Configurations.Add(new LocationConfiguration());
            modelBuilder.Configurations.Add(new RegionConfiguration());
            modelBuilder.Configurations.Add(new TypeCharTableConfiguration());
            modelBuilder.Configurations.Add(new TypeDateTableConfiguration());
            modelBuilder.Configurations.Add(new TypeNumTableConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new CountRyConfiguration(schema));
            modelBuilder.Configurations.Add(new DepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new EmployeeConfiguration(schema));
            modelBuilder.Configurations.Add(new JobConfiguration(schema));
            modelBuilder.Configurations.Add(new JobHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new LocationConfiguration(schema));
            modelBuilder.Configurations.Add(new RegionConfiguration(schema));
            modelBuilder.Configurations.Add(new TypeCharTableConfiguration(schema));
            modelBuilder.Configurations.Add(new TypeDateTableConfiguration(schema));
            modelBuilder.Configurations.Add(new TypeNumTableConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void DisposePartial(bool disposing);
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);
    }
    #endregion

    #region Database context factory

    public partial class TestDatabaseNoDataAnnotationDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<TestDatabaseNoDataAnnotationDbContext>
    {
        public TestDatabaseNoDataAnnotationDbContext Create()
        {
            return new TestDatabaseNoDataAnnotationDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class FakeTestDatabaseNoDataAnnotationDbContext : ITestDatabaseNoDataAnnotationDbContext
    {
        public System.Data.Entity.DbSet<CountRy> CountRies { get; set; }
        public System.Data.Entity.DbSet<Department> Departments { get; set; }
        public System.Data.Entity.DbSet<Employee> Employees { get; set; }
        public System.Data.Entity.DbSet<Job> Jobs { get; set; }
        public System.Data.Entity.DbSet<JobHistory> JobHistories { get; set; }
        public System.Data.Entity.DbSet<Location> Locations { get; set; }
        public System.Data.Entity.DbSet<Region> Regions { get; set; }
        public System.Data.Entity.DbSet<TypeCharTable> TypeCharTables { get; set; }
        public System.Data.Entity.DbSet<TypeDateTable> TypeDateTables { get; set; }
        public System.Data.Entity.DbSet<TypeNumTable> TypeNumTables { get; set; }

        public FakeTestDatabaseNoDataAnnotationDbContext()
        {
            CountRies = new FakeDbSet<CountRy>("CountryId");
            Departments = new FakeDbSet<Department>("DepartmentId");
            Employees = new FakeDbSet<Employee>("EmployeeId");
            Jobs = new FakeDbSet<Job>("JobId");
            JobHistories = new FakeDbSet<JobHistory>("EmployeeId", "StartDate");
            Locations = new FakeDbSet<Location>("LocationId");
            Regions = new FakeDbSet<Region>("RegionId");
            TypeCharTables = new FakeDbSet<TypeCharTable>("Pk");
            TypeDateTables = new FakeDbSet<TypeDateTable>("Pk");
            TypeNumTables = new FakeDbSet<TypeNumTable>("Pk");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }

        partial void InitializePartial();
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // The table 'BLAH' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // BLAH
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Blah
    {
        public decimal? I { get; set; } // I
        public decimal? I2 { get; set; } // I2

        public Blah()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // COUNTRIES
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class CountRy
    {
        public string CountryId { get; set; } // COUNTRY_ID (Primary key) (length: 2)
        public string CountryName { get; set; } // COUNTRY_NAME (length: 40)
        public decimal? RegionId { get; set; } // REGION_ID

        // Reverse navigation

        /// <summary>
        /// Child Locations where [LOCATIONS].[COUNTRY_ID] point to this entity (LOC_C_ID_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Location> Locations { get; set; } // LOCATIONS.LOC_C_ID_FK

        // Foreign keys

        /// <summary>
        /// Parent Region pointed by [COUNTRIES].([RegionId]) (COUNTR_REG_FK)
        /// </summary>
        public virtual Region Region { get; set; } // COUNTR_REG_FK

        public CountRy()
        {
            Locations = new System.Collections.Generic.List<Location>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // DEPARTMENTS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Department
    {
        public short DepartmentId { get; set; } // DEPARTMENT_ID (Primary key)
        public string DepartmentName { get; set; } // DEPARTMENT_NAME (length: 30)
        public int? ManagerId { get; set; } // MANAGER_ID
        public short? LocationId { get; set; } // LOCATION_ID

        // Reverse navigation

        /// <summary>
        /// Child Employees where [EMPLOYEES].[DEPARTMENT_ID] point to this entity (EMP_DEPT_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Employee> Employees { get; set; } // EMPLOYEES.EMP_DEPT_FK
        /// <summary>
        /// Child JobHistories where [JOB_HISTORY].[DEPARTMENT_ID] point to this entity (JHIST_DEPT_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<JobHistory> JobHistories { get; set; } // JOB_HISTORY.JHIST_DEPT_FK

        // Foreign keys

        /// <summary>
        /// Parent Employee pointed by [DEPARTMENTS].([ManagerId]) (DEPT_MGR_FK)
        /// </summary>
        public virtual Employee Employee { get; set; } // DEPT_MGR_FK

        /// <summary>
        /// Parent Location pointed by [DEPARTMENTS].([LocationId]) (DEPT_LOC_FK)
        /// </summary>
        public virtual Location Location { get; set; } // DEPT_LOC_FK

        public Department()
        {
            JobHistories = new System.Collections.Generic.List<JobHistory>();
            Employees = new System.Collections.Generic.List<Employee>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // EMPLOYEES
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Employee
    {
        public int EmployeeId { get; set; } // EMPLOYEE_ID (Primary key)
        public string FirstName { get; set; } // FIRST_NAME (length: 20)
        public string LastName { get; set; } // LAST_NAME (length: 25)
        public string Email { get; set; } // EMAIL (length: 25)
        public string PhoneNumber { get; set; } // PHONE_NUMBER (length: 20)
        public System.DateTime HireDate { get; set; } // HIRE_DATE
        public string JobId { get; set; } // JOB_ID (length: 10)
        public decimal? Salary { get; set; } // SALARY
        public decimal? CommissionPct { get; set; } // COMMISSION_PCT
        public int? ManagerId { get; set; } // MANAGER_ID
        public short? DepartmentId { get; set; } // DEPARTMENT_ID

        // Reverse navigation

        /// <summary>
        /// Child Departments where [DEPARTMENTS].[MANAGER_ID] point to this entity (DEPT_MGR_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Department> Departments { get; set; } // DEPARTMENTS.DEPT_MGR_FK
        /// <summary>
        /// Child Employees where [EMPLOYEES].[MANAGER_ID] point to this entity (EMP_MANAGER_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Employee> Employees { get; set; } // EMPLOYEES.EMP_MANAGER_FK
        /// <summary>
        /// Child JobHistories where [JOB_HISTORY].[EMPLOYEE_ID] point to this entity (JHIST_EMP_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<JobHistory> JobHistories { get; set; } // JOB_HISTORY.JHIST_EMP_FK

        // Foreign keys

        /// <summary>
        /// Parent Department pointed by [EMPLOYEES].([DepartmentId]) (EMP_DEPT_FK)
        /// </summary>
        public virtual Department Department { get; set; } // EMP_DEPT_FK

        /// <summary>
        /// Parent Employee pointed by [EMPLOYEES].([ManagerId]) (EMP_MANAGER_FK)
        /// </summary>
        public virtual Employee Manager { get; set; } // EMP_MANAGER_FK

        /// <summary>
        /// Parent Job pointed by [EMPLOYEES].([JobId]) (EMP_JOB_FK)
        /// </summary>
        public virtual Job Job { get; set; } // EMP_JOB_FK

        public Employee()
        {
            Employees = new System.Collections.Generic.List<Employee>();
            JobHistories = new System.Collections.Generic.List<JobHistory>();
            Departments = new System.Collections.Generic.List<Department>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // JOBS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Job
    {
        public string JobId { get; set; } // JOB_ID (Primary key) (length: 10)
        public string JobTitle { get; set; } // JOB_TITLE (length: 35)
        public int? MinSalary { get; set; } // MIN_SALARY
        public int? MaxSalary { get; set; } // MAX_SALARY

        // Reverse navigation

        /// <summary>
        /// Child Employees where [EMPLOYEES].[JOB_ID] point to this entity (EMP_JOB_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Employee> Employees { get; set; } // EMPLOYEES.EMP_JOB_FK
        /// <summary>
        /// Child JobHistories where [JOB_HISTORY].[JOB_ID] point to this entity (JHIST_JOB_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<JobHistory> JobHistories { get; set; } // JOB_HISTORY.JHIST_JOB_FK

        public Job()
        {
            Employees = new System.Collections.Generic.List<Employee>();
            JobHistories = new System.Collections.Generic.List<JobHistory>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // JOB_HISTORY
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class JobHistory
    {
        public int EmployeeId { get; set; } // EMPLOYEE_ID (Primary key)
        public System.DateTime StartDate { get; set; } // START_DATE (Primary key)
        public System.DateTime EndDate { get; set; } // END_DATE
        public string JobId { get; set; } // JOB_ID (length: 10)
        public short? DepartmentId { get; set; } // DEPARTMENT_ID

        // Foreign keys

        /// <summary>
        /// Parent Department pointed by [JOB_HISTORY].([DepartmentId]) (JHIST_DEPT_FK)
        /// </summary>
        public virtual Department Department { get; set; } // JHIST_DEPT_FK

        /// <summary>
        /// Parent Employee pointed by [JOB_HISTORY].([EmployeeId]) (JHIST_EMP_FK)
        /// </summary>
        public virtual Employee Employee { get; set; } // JHIST_EMP_FK

        /// <summary>
        /// Parent Job pointed by [JOB_HISTORY].([JobId]) (JHIST_JOB_FK)
        /// </summary>
        public virtual Job Job { get; set; } // JHIST_JOB_FK

        public JobHistory()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // LOCATIONS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Location
    {
        public short LocationId { get; set; } // LOCATION_ID (Primary key)
        public string StreetAddress { get; set; } // STREET_ADDRESS (length: 40)
        public string PostalCode { get; set; } // POSTAL_CODE (length: 12)
        public string City { get; set; } // CITY (length: 30)
        public string StateProvince { get; set; } // STATE_PROVINCE (length: 25)
        public string CountryId { get; set; } // COUNTRY_ID (length: 2)

        // Reverse navigation

        /// <summary>
        /// Child Departments where [DEPARTMENTS].[LOCATION_ID] point to this entity (DEPT_LOC_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Department> Departments { get; set; } // DEPARTMENTS.DEPT_LOC_FK

        // Foreign keys

        /// <summary>
        /// Parent CountRy pointed by [LOCATIONS].([CountryId]) (LOC_C_ID_FK)
        /// </summary>
        public virtual CountRy CountRy { get; set; } // LOC_C_ID_FK

        public Location()
        {
            Departments = new System.Collections.Generic.List<Department>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // REGIONS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Region
    {
        public decimal RegionId { get; set; } // REGION_ID (Primary key)
        public string RegionName { get; set; } // REGION_NAME (length: 25)

        // Reverse navigation

        /// <summary>
        /// Child CountRies where [COUNTRIES].[REGION_ID] point to this entity (COUNTR_REG_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CountRy> CountRies { get; set; } // COUNTRIES.COUNTR_REG_FK

        public Region()
        {
            CountRies = new System.Collections.Generic.List<CountRy>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // TYPE_CHAR_TABLE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TypeCharTable
    {
        public long Pk { get; set; } // PK (Primary key)
        public string Charcol { get; set; } // CHARCOL (length: 2000)
        public string Charvaryingcol { get; set; } // CHARVARYINGCOL (length: 4000)
        public string Charactercol { get; set; } // CHARACTERCOL (length: 2000)
        public string Charactervaryingcol { get; set; } // CHARACTERVARYINGCOL (length: 4000)
        public string Nationalcharvarying { get; set; } // NATIONALCHARVARYING (length: 4000)
        public string Nationalcharactervaryingcol { get; set; } // NATIONALCHARACTERVARYINGCOL (length: 4000)
        public string Ncharcol { get; set; } // NCHARCOL (length: 2000)
        public string Ncharvaryingcol { get; set; } // NCHARVARYINGCOL (length: 4000)
        public string Nvarchar2Col { get; set; } // NVARCHAR2COL (length: 4000)
        public string Varcharcol { get; set; } // VARCHARCOL (length: 4000)
        public string Varchar2Col { get; set; } // VARCHAR2COL (length: 4000)
        public string Varchar2Defaultcol { get; set; } // VARCHAR2DEFAULTCOL (length: 4000)
        public string Varchar2Default2Col { get; set; } // VARCHAR2DEFAULT2COL (length: 4000)
        public string Varchar2Default3Col { get; set; } // VARCHAR2DEFAULT3COL (length: 4000)
        public string Varchar2Default4Col { get; set; } // VARCHAR2DEFAULT4COL (length: 4000)
        public string Varchar2Default5Col { get; set; } // VARCHAR2DEFAULT5COL (length: 4000)
        public string Varchar2Default6Col { get; set; } // VARCHAR2DEFAULT6COL (length: 4000)
        public string Clobcol { get; set; } // CLOBCOL
        public string Clobdefaultcol { get; set; } // CLOBDEFAULTCOL
        public string Nclobcol { get; set; } // NCLOBCOL

        public TypeCharTable()
        {
            Varchar2Defaultcol = "default_value_for_varchar2";
            Varchar2Default2Col = "default_value_for_varchar2";
            Varchar2Default6Col = "'should_be_wrapped_in_single_quotes' - \"more text in double quotes\" - yet more text";
            Clobdefaultcol = "default_value_for_clob";
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // TYPE_DATE_TABLE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TypeDateTable
    {
        public long Pk { get; set; } // PK (Primary key)
        public System.DateTime? Datecol { get; set; } // DATECOL
        public System.DateTime? Datedefaultcol { get; set; } // DATEDEFAULTCOL
        public System.DateTime? Datedefault2Col { get; set; } // DATEDEFAULT2COL
        public System.DateTime? Timestampcol { get; set; } // TIMESTAMPCOL
        public System.DateTime? Timestampdefaultcol { get; set; } // TIMESTAMPDEFAULTCOL
        public System.DateTime? Timestampdefault2Col { get; set; } // TIMESTAMPDEFAULT2COL
        public System.DateTime? Timestampcol2 { get; set; } // TIMESTAMPCOL2
        public System.DateTime? Timestampcol3 { get; set; } // TIMESTAMPCOL3
        public System.DateTimeOffset? Timestamptzcol { get; set; } // TIMESTAMPTZCOL
        public System.DateTimeOffset? Timestamptzcol2 { get; set; } // TIMESTAMPTZCOL2
        public System.DateTimeOffset? Timestamptzcol3 { get; set; } // TIMESTAMPTZCOL3
        public System.DateTime? Timestampltzzcol { get; set; } // TIMESTAMPLTZZCOL
        public System.DateTime? Timestampltzcol2 { get; set; } // TIMESTAMPLTZCOL2
        public System.DateTime? Timestampltzcol3 { get; set; } // TIMESTAMPLTZCOL3
        public decimal? Intervalyeartomonthcol { get; set; } // INTERVALYEARTOMONTHCOL
        public decimal? Intervalyeartomonthcol2 { get; set; } // INTERVALYEARTOMONTHCOL2
        public decimal? Intervalyeartomonthcol3 { get; set; } // INTERVALYEARTOMONTHCOL3
        public decimal? Intervaldaytoseccol { get; set; } // INTERVALDAYTOSECCOL
        public decimal? Intervaldaytoseccol2 { get; set; } // INTERVALDAYTOSECCOL2
        public decimal? Intervaldaytoseccol3 { get; set; } // INTERVALDAYTOSECCOL3

        public TypeDateTable()
        {
            Datedefaultcol = System.DateTime.Now;
            Timestampdefaultcol = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // TYPE_NUM_TABLE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TypeNumTable
    {
        public long Pk { get; set; } // PK (Primary key)
        public decimal? Deccol { get; set; } // DECCOL
        public decimal? Deccol2 { get; set; } // DECCOL2
        public decimal? Decdefaultcol { get; set; } // DECDEFAULTCOL
        public decimal? Decdefault2Col { get; set; } // DECDEFAULT2COL
        public decimal? Decdefault3Col { get; set; } // DECDEFAULT3COL
        public decimal? Decimalcol { get; set; } // DECIMALCOL
        public decimal? Decimalcol2 { get; set; } // DECIMALCOL2
        public decimal? Doubleprecisioncol { get; set; } // DOUBLEPRECISIONCOL
        public decimal? Doubleprecisiondefaultcol { get; set; } // DOUBLEPRECISIONDEFAULTCOL
        public decimal? Floatcol { get; set; } // FLOATCOL
        public float? Binaryfloatcol { get; set; } // BINARYFLOATCOL
        public float? Binaryfloatdefaultcol { get; set; } // BINARYFLOATDEFAULTCOL
        public double? Binarydoublecol { get; set; } // BINARYDOUBLECOL
        public double? Binarydoubledefaultcol { get; set; } // BINARYDOUBLEDEFAULTCOL
        public decimal? Intcol { get; set; } // INTCOL
        public decimal? Integercol { get; set; } // INTEGERCOL
        public decimal? Numbercol { get; set; } // NUMBERCOL
        public decimal? Numberdefaultcol { get; set; } // NUMBERDEFAULTCOL
        public decimal? Numberdefault2Col { get; set; } // NUMBERDEFAULT2COL
        public decimal? Numberdefault3Col { get; set; } // NUMBERDEFAULT3COL
        public decimal? Numberfcol { get; set; } // NUMBERFCOL
        public decimal? Numericcol { get; set; } // NUMERICCOL
        public decimal? Numericfcol { get; set; } // NUMERICFCOL
        public decimal? Realcol { get; set; } // REALCOL
        public decimal? Smallintcol { get; set; } // SMALLINTCOL
        public short? Number1Col { get; set; } // NUMBER1COL
        public short? Number1Col2 { get; set; } // NUMBER1COL2
        public short? Number2Col { get; set; } // NUMBER2COL
        public short? Number3Col { get; set; } // NUMBER3COL
        public short? Number4Col { get; set; } // NUMBER4COL
        public short? Number4Col2 { get; set; } // NUMBER4COL2
        public int? Number5Col { get; set; } // NUMBER5COL
        public int? Number5Col2 { get; set; } // NUMBER5COL2
        public int? Number6Col { get; set; } // NUMBER6COL
        public int? Number7Col { get; set; } // NUMBER7COL
        public int? Number8Col { get; set; } // NUMBER8COL
        public int? Number9Col { get; set; } // NUMBER9COL
        public long? Number10Col { get; set; } // NUMBER10COL
        public long? Number10Col2 { get; set; } // NUMBER10COL2
        public long? Number11Col { get; set; } // NUMBER11COL
        public long? Number11Col2 { get; set; } // NUMBER11COL2
        public long? Number12Col { get; set; } // NUMBER12COL
        public long? Number13Col { get; set; } // NUMBER13COL
        public long? Number14Col { get; set; } // NUMBER14COL
        public long? Number15Col { get; set; } // NUMBER15COL
        public long? Number16Col { get; set; } // NUMBER16COL
        public long? Number17Col { get; set; } // NUMBER17COL
        public long? Number18Col { get; set; } // NUMBER18COL
        public long? Number19Col { get; set; } // NUMBER19COL
        public long? Number19Col2 { get; set; } // NUMBER19COL2
        public decimal? Number20Col { get; set; } // NUMBER20COL
        public decimal? Number20Col2 { get; set; } // NUMBER20COL2
        public decimal? Number21Col { get; set; } // NUMBER21COL
        public decimal? Number22Col { get; set; } // NUMBER22COL
        public decimal? Number23Col { get; set; } // NUMBER23COL
        public decimal? Number24Col { get; set; } // NUMBER24COL
        public decimal? Number25Col { get; set; } // NUMBER25COL

        public TypeNumTable()
        {
            Decdefaultcol = 10.0m;
            Decdefault2Col = 10.0m;
            Decdefault3Col = 10.0m;
            Doubleprecisiondefaultcol = 3.0m;
            Binaryfloatdefaultcol = 1.0f;
            Binarydoubledefaultcol = 2.0d;
            Numberdefaultcol = 1m;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    #endregion

    #region POCO Configuration

    // COUNTRIES
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class CountRyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CountRy>
    {
        public CountRyConfiguration()
            : this("HR")
        {
        }

        public CountRyConfiguration(string schema)
        {
            ToTable("COUNTRIES", schema);
            HasKey(x => x.CountryId);

            Property(x => x.CountryId).HasColumnName(@"COUNTRY_ID").HasColumnType("char").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CountryName).HasColumnName(@"COUNTRY_NAME").HasColumnType("varchar2").IsOptional().IsUnicode(false).HasMaxLength(40);
            Property(x => x.RegionId).HasColumnName(@"REGION_ID").HasColumnType("number").IsOptional();

            // Foreign keys
            HasOptional(a => a.Region).WithMany(b => b.CountRies).HasForeignKey(c => c.RegionId).WillCascadeOnDelete(false); // COUNTR_REG_FK
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // DEPARTMENTS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class DepartmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Department>
    {
        public DepartmentConfiguration()
            : this("HR")
        {
        }

        public DepartmentConfiguration(string schema)
        {
            ToTable("DEPARTMENTS", schema);
            HasKey(x => x.DepartmentId);

            Property(x => x.DepartmentId).HasColumnName(@"DEPARTMENT_ID").HasColumnType("number").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DepartmentName).HasColumnName(@"DEPARTMENT_NAME").HasColumnType("varchar2").IsRequired().IsUnicode(false).HasMaxLength(30);
            Property(x => x.ManagerId).HasColumnName(@"MANAGER_ID").HasColumnType("number").IsOptional();
            Property(x => x.LocationId).HasColumnName(@"LOCATION_ID").HasColumnType("number").IsOptional();

            // Foreign keys
            HasOptional(a => a.Employee).WithMany(b => b.Departments).HasForeignKey(c => c.ManagerId).WillCascadeOnDelete(false); // DEPT_MGR_FK
            HasOptional(a => a.Location).WithMany(b => b.Departments).HasForeignKey(c => c.LocationId).WillCascadeOnDelete(false); // DEPT_LOC_FK
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // EMPLOYEES
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class EmployeeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Employee>
    {
        public EmployeeConfiguration()
            : this("HR")
        {
        }

        public EmployeeConfiguration(string schema)
        {
            ToTable("EMPLOYEES", schema);
            HasKey(x => x.EmployeeId);

            Property(x => x.EmployeeId).HasColumnName(@"EMPLOYEE_ID").HasColumnType("number").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FirstName).HasColumnName(@"FIRST_NAME").HasColumnType("varchar2").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.LastName).HasColumnName(@"LAST_NAME").HasColumnType("varchar2").IsRequired().IsUnicode(false).HasMaxLength(25);
            Property(x => x.Email).HasColumnName(@"EMAIL").HasColumnType("varchar2").IsRequired().IsUnicode(false).HasMaxLength(25);
            Property(x => x.PhoneNumber).HasColumnName(@"PHONE_NUMBER").HasColumnType("varchar2").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.HireDate).HasColumnName(@"HIRE_DATE").HasColumnType("date").IsRequired();
            Property(x => x.JobId).HasColumnName(@"JOB_ID").HasColumnType("varchar2").IsRequired().IsUnicode(false).HasMaxLength(10);
            Property(x => x.Salary).HasColumnName(@"SALARY").HasColumnType("number").IsOptional().HasPrecision(8,2);
            Property(x => x.CommissionPct).HasColumnName(@"COMMISSION_PCT").HasColumnType("number").IsOptional().HasPrecision(2,2);
            Property(x => x.ManagerId).HasColumnName(@"MANAGER_ID").HasColumnType("number").IsOptional();
            Property(x => x.DepartmentId).HasColumnName(@"DEPARTMENT_ID").HasColumnType("number").IsOptional();

            // Foreign keys
            HasOptional(a => a.Department).WithMany(b => b.Employees).HasForeignKey(c => c.DepartmentId).WillCascadeOnDelete(false); // EMP_DEPT_FK
            HasOptional(a => a.Manager).WithMany(b => b.Employees).HasForeignKey(c => c.ManagerId).WillCascadeOnDelete(false); // EMP_MANAGER_FK
            HasRequired(a => a.Job).WithMany(b => b.Employees).HasForeignKey(c => c.JobId).WillCascadeOnDelete(false); // EMP_JOB_FK
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // JOBS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class JobConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Job>
    {
        public JobConfiguration()
            : this("HR")
        {
        }

        public JobConfiguration(string schema)
        {
            ToTable("JOBS", schema);
            HasKey(x => x.JobId);

            Property(x => x.JobId).HasColumnName(@"JOB_ID").HasColumnType("varchar2").IsRequired().IsUnicode(false).HasMaxLength(10).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.JobTitle).HasColumnName(@"JOB_TITLE").HasColumnType("varchar2").IsRequired().IsUnicode(false).HasMaxLength(35);
            Property(x => x.MinSalary).HasColumnName(@"MIN_SALARY").HasColumnType("number").IsOptional();
            Property(x => x.MaxSalary).HasColumnName(@"MAX_SALARY").HasColumnType("number").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // JOB_HISTORY
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class JobHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<JobHistory>
    {
        public JobHistoryConfiguration()
            : this("HR")
        {
        }

        public JobHistoryConfiguration(string schema)
        {
            ToTable("JOB_HISTORY", schema);
            HasKey(x => new { x.EmployeeId, x.StartDate });

            Property(x => x.EmployeeId).HasColumnName(@"EMPLOYEE_ID").HasColumnType("number").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"START_DATE").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"END_DATE").HasColumnType("date").IsRequired();
            Property(x => x.JobId).HasColumnName(@"JOB_ID").HasColumnType("varchar2").IsRequired().IsUnicode(false).HasMaxLength(10);
            Property(x => x.DepartmentId).HasColumnName(@"DEPARTMENT_ID").HasColumnType("number").IsOptional();

            // Foreign keys
            HasOptional(a => a.Department).WithMany(b => b.JobHistories).HasForeignKey(c => c.DepartmentId).WillCascadeOnDelete(false); // JHIST_DEPT_FK
            HasRequired(a => a.Employee).WithMany(b => b.JobHistories).HasForeignKey(c => c.EmployeeId).WillCascadeOnDelete(false); // JHIST_EMP_FK
            HasRequired(a => a.Job).WithMany(b => b.JobHistories).HasForeignKey(c => c.JobId).WillCascadeOnDelete(false); // JHIST_JOB_FK
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // LOCATIONS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class LocationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Location>
    {
        public LocationConfiguration()
            : this("HR")
        {
        }

        public LocationConfiguration(string schema)
        {
            ToTable("LOCATIONS", schema);
            HasKey(x => x.LocationId);

            Property(x => x.LocationId).HasColumnName(@"LOCATION_ID").HasColumnType("number").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StreetAddress).HasColumnName(@"STREET_ADDRESS").HasColumnType("varchar2").IsOptional().IsUnicode(false).HasMaxLength(40);
            Property(x => x.PostalCode).HasColumnName(@"POSTAL_CODE").HasColumnType("varchar2").IsOptional().IsUnicode(false).HasMaxLength(12);
            Property(x => x.City).HasColumnName(@"CITY").HasColumnType("varchar2").IsRequired().IsUnicode(false).HasMaxLength(30);
            Property(x => x.StateProvince).HasColumnName(@"STATE_PROVINCE").HasColumnType("varchar2").IsOptional().IsUnicode(false).HasMaxLength(25);
            Property(x => x.CountryId).HasColumnName(@"COUNTRY_ID").HasColumnType("char").IsOptional().IsFixedLength().IsUnicode(false).HasMaxLength(2);

            // Foreign keys
            HasOptional(a => a.CountRy).WithMany(b => b.Locations).HasForeignKey(c => c.CountryId).WillCascadeOnDelete(false); // LOC_C_ID_FK
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // REGIONS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class RegionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Region>
    {
        public RegionConfiguration()
            : this("HR")
        {
        }

        public RegionConfiguration(string schema)
        {
            ToTable("REGIONS", schema);
            HasKey(x => x.RegionId);

            Property(x => x.RegionId).HasColumnName(@"REGION_ID").HasColumnType("number").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RegionName).HasColumnName(@"REGION_NAME").HasColumnType("varchar2").IsOptional().IsUnicode(false).HasMaxLength(25);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // TYPE_CHAR_TABLE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TypeCharTableConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TypeCharTable>
    {
        public TypeCharTableConfiguration()
            : this("EFPOCO")
        {
        }

        public TypeCharTableConfiguration(string schema)
        {
            ToTable("TYPE_CHAR_TABLE", schema);
            HasKey(x => x.Pk);

            Property(x => x.Pk).HasColumnName(@"PK").HasColumnType("number").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Charcol).HasColumnName(@"CHARCOL").HasColumnType("char").IsOptional().IsFixedLength().IsUnicode(false).HasMaxLength(2000);
            Property(x => x.Charvaryingcol).HasColumnName(@"CHARVARYINGCOL").HasColumnType("varchar2").IsOptional().IsUnicode(false).HasMaxLength(4000);
            Property(x => x.Charactercol).HasColumnName(@"CHARACTERCOL").HasColumnType("char").IsOptional().IsFixedLength().IsUnicode(false).HasMaxLength(2000);
            Property(x => x.Charactervaryingcol).HasColumnName(@"CHARACTERVARYINGCOL").HasColumnType("varchar2").IsOptional().IsUnicode(false).HasMaxLength(4000);
            Property(x => x.Nationalcharvarying).HasColumnName(@"NATIONALCHARVARYING").HasColumnType("nvarchar2").IsOptional().HasMaxLength(4000);
            Property(x => x.Nationalcharactervaryingcol).HasColumnName(@"NATIONALCHARACTERVARYINGCOL").HasColumnType("nvarchar2").IsOptional().HasMaxLength(4000);
            Property(x => x.Ncharcol).HasColumnName(@"NCHARCOL").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(2000);
            Property(x => x.Ncharvaryingcol).HasColumnName(@"NCHARVARYINGCOL").HasColumnType("nvarchar2").IsOptional().HasMaxLength(4000);
            Property(x => x.Nvarchar2Col).HasColumnName(@"NVARCHAR2COL").HasColumnType("nvarchar2").IsOptional().HasMaxLength(4000);
            Property(x => x.Varcharcol).HasColumnName(@"VARCHARCOL").HasColumnType("varchar2").IsOptional().IsUnicode(false).HasMaxLength(4000);
            Property(x => x.Varchar2Col).HasColumnName(@"VARCHAR2COL").HasColumnType("varchar2").IsOptional().IsUnicode(false).HasMaxLength(4000);
            Property(x => x.Varchar2Defaultcol).HasColumnName(@"VARCHAR2DEFAULTCOL").HasColumnType("varchar2").IsOptional().IsUnicode(false).HasMaxLength(4000);
            Property(x => x.Varchar2Default2Col).HasColumnName(@"VARCHAR2DEFAULT2COL").HasColumnType("varchar2").IsOptional().IsUnicode(false).HasMaxLength(4000);
            Property(x => x.Varchar2Default3Col).HasColumnName(@"VARCHAR2DEFAULT3COL").HasColumnType("varchar2").IsOptional().IsUnicode(false).HasMaxLength(4000);
            Property(x => x.Varchar2Default4Col).HasColumnName(@"VARCHAR2DEFAULT4COL").HasColumnType("varchar2").IsOptional().IsUnicode(false).HasMaxLength(4000);
            Property(x => x.Varchar2Default5Col).HasColumnName(@"VARCHAR2DEFAULT5COL").HasColumnType("varchar2").IsOptional().IsUnicode(false).HasMaxLength(4000);
            Property(x => x.Varchar2Default6Col).HasColumnName(@"VARCHAR2DEFAULT6COL").HasColumnType("varchar2").IsOptional().IsUnicode(false).HasMaxLength(4000);
            Property(x => x.Clobcol).HasColumnName(@"CLOBCOL").HasColumnType("clob").IsOptional();
            Property(x => x.Clobdefaultcol).HasColumnName(@"CLOBDEFAULTCOL").HasColumnType("clob").IsOptional();
            Property(x => x.Nclobcol).HasColumnName(@"NCLOBCOL").HasColumnType("nclob").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // TYPE_DATE_TABLE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TypeDateTableConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TypeDateTable>
    {
        public TypeDateTableConfiguration()
            : this("EFPOCO")
        {
        }

        public TypeDateTableConfiguration(string schema)
        {
            ToTable("TYPE_DATE_TABLE", schema);
            HasKey(x => x.Pk);

            Property(x => x.Pk).HasColumnName(@"PK").HasColumnType("number").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Datecol).HasColumnName(@"DATECOL").HasColumnType("date").IsOptional();
            Property(x => x.Datedefaultcol).HasColumnName(@"DATEDEFAULTCOL").HasColumnType("date").IsOptional();
            Property(x => x.Datedefault2Col).HasColumnName(@"DATEDEFAULT2COL").HasColumnType("date").IsOptional();
            Property(x => x.Timestampcol).HasColumnName(@"TIMESTAMPCOL").HasColumnType("timestamp").IsOptional();
            Property(x => x.Timestampdefaultcol).HasColumnName(@"TIMESTAMPDEFAULTCOL").HasColumnType("timestamp").IsOptional();
            Property(x => x.Timestampdefault2Col).HasColumnName(@"TIMESTAMPDEFAULT2COL").HasColumnType("timestamp").IsOptional();
            Property(x => x.Timestampcol2).HasColumnName(@"TIMESTAMPCOL2").HasColumnType("timestamp").IsOptional();
            Property(x => x.Timestampcol3).HasColumnName(@"TIMESTAMPCOL3").HasColumnType("timestamp").IsOptional();
            Property(x => x.Timestamptzcol).HasColumnName(@"TIMESTAMPTZCOL").HasColumnType("timestamp with time zone").IsOptional();
            Property(x => x.Timestamptzcol2).HasColumnName(@"TIMESTAMPTZCOL2").HasColumnType("timestamp with time zone").IsOptional();
            Property(x => x.Timestamptzcol3).HasColumnName(@"TIMESTAMPTZCOL3").HasColumnType("timestamp with time zone").IsOptional();
            Property(x => x.Timestampltzzcol).HasColumnName(@"TIMESTAMPLTZZCOL").HasColumnType("timestamp with local time zone").IsOptional();
            Property(x => x.Timestampltzcol2).HasColumnName(@"TIMESTAMPLTZCOL2").HasColumnType("timestamp with local time zone").IsOptional();
            Property(x => x.Timestampltzcol3).HasColumnName(@"TIMESTAMPLTZCOL3").HasColumnType("timestamp with local time zone").IsOptional();
            Property(x => x.Intervalyeartomonthcol).HasColumnName(@"INTERVALYEARTOMONTHCOL").HasColumnType("interval year to month").IsOptional().HasPrecision(2,0);
            Property(x => x.Intervalyeartomonthcol2).HasColumnName(@"INTERVALYEARTOMONTHCOL2").HasColumnType("interval year to month").IsOptional();
            Property(x => x.Intervalyeartomonthcol3).HasColumnName(@"INTERVALYEARTOMONTHCOL3").HasColumnType("interval year to month").IsOptional().HasPrecision(9,0);
            Property(x => x.Intervaldaytoseccol).HasColumnName(@"INTERVALDAYTOSECCOL").HasColumnType("interval day to second").IsOptional().HasPrecision(2,6);
            Property(x => x.Intervaldaytoseccol2).HasColumnName(@"INTERVALDAYTOSECCOL2").HasColumnType("interval day to second").IsOptional();
            Property(x => x.Intervaldaytoseccol3).HasColumnName(@"INTERVALDAYTOSECCOL3").HasColumnType("interval day to second").IsOptional().HasPrecision(9,9);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // TYPE_NUM_TABLE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TypeNumTableConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TypeNumTable>
    {
        public TypeNumTableConfiguration()
            : this("EFPOCO")
        {
        }

        public TypeNumTableConfiguration(string schema)
        {
            ToTable("TYPE_NUM_TABLE", schema);
            HasKey(x => x.Pk);

            Property(x => x.Pk).HasColumnName(@"PK").HasColumnType("number").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Deccol).HasColumnName(@"DECCOL").HasColumnType("number").IsOptional().HasPrecision(38,0);
            Property(x => x.Deccol2).HasColumnName(@"DECCOL2").HasColumnType("number").IsOptional().HasPrecision(38,10);
            Property(x => x.Decdefaultcol).HasColumnName(@"DECDEFAULTCOL").HasColumnType("number").IsOptional().HasPrecision(38,10);
            Property(x => x.Decdefault2Col).HasColumnName(@"DECDEFAULT2COL").HasColumnType("number").IsOptional().HasPrecision(38,10);
            Property(x => x.Decdefault3Col).HasColumnName(@"DECDEFAULT3COL").HasColumnType("number").IsOptional().HasPrecision(38,10);
            Property(x => x.Decimalcol).HasColumnName(@"DECIMALCOL").HasColumnType("number").IsOptional().HasPrecision(38,0);
            Property(x => x.Decimalcol2).HasColumnName(@"DECIMALCOL2").HasColumnType("number").IsOptional().HasPrecision(38,10);
            Property(x => x.Doubleprecisioncol).HasColumnName(@"DOUBLEPRECISIONCOL").HasColumnType("float").IsOptional().HasPrecision(126,0);
            Property(x => x.Doubleprecisiondefaultcol).HasColumnName(@"DOUBLEPRECISIONDEFAULTCOL").HasColumnType("float").IsOptional().HasPrecision(126,0);
            Property(x => x.Floatcol).HasColumnName(@"FLOATCOL").HasColumnType("float").IsOptional().HasPrecision(126,0);
            Property(x => x.Binaryfloatcol).HasColumnName(@"BINARYFLOATCOL").HasColumnType("binary_float").IsOptional();
            Property(x => x.Binaryfloatdefaultcol).HasColumnName(@"BINARYFLOATDEFAULTCOL").HasColumnType("binary_float").IsOptional();
            Property(x => x.Binarydoublecol).HasColumnName(@"BINARYDOUBLECOL").HasColumnType("binary_double").IsOptional();
            Property(x => x.Binarydoubledefaultcol).HasColumnName(@"BINARYDOUBLEDEFAULTCOL").HasColumnType("binary_double").IsOptional();
            Property(x => x.Intcol).HasColumnName(@"INTCOL").HasColumnType("number").IsOptional();
            Property(x => x.Integercol).HasColumnName(@"INTEGERCOL").HasColumnType("number").IsOptional();
            Property(x => x.Numbercol).HasColumnName(@"NUMBERCOL").HasColumnType("number").IsOptional().HasPrecision(38,0);
            Property(x => x.Numberdefaultcol).HasColumnName(@"NUMBERDEFAULTCOL").HasColumnType("number").IsOptional().HasPrecision(38,0);
            Property(x => x.Numberdefault2Col).HasColumnName(@"NUMBERDEFAULT2COL").HasColumnType("number").IsOptional().HasPrecision(38,0);
            Property(x => x.Numberdefault3Col).HasColumnName(@"NUMBERDEFAULT3COL").HasColumnType("number").IsOptional().HasPrecision(38,0);
            Property(x => x.Numberfcol).HasColumnName(@"NUMBERFCOL").HasColumnType("number").IsOptional();
            Property(x => x.Numericcol).HasColumnName(@"NUMERICCOL").HasColumnType("number").IsOptional().HasPrecision(38,0);
            Property(x => x.Numericfcol).HasColumnName(@"NUMERICFCOL").HasColumnType("number").IsOptional();
            Property(x => x.Realcol).HasColumnName(@"REALCOL").HasColumnType("float").IsOptional().HasPrecision(63,0);
            Property(x => x.Smallintcol).HasColumnName(@"SMALLINTCOL").HasColumnType("number").IsOptional();
            Property(x => x.Number1Col).HasColumnName(@"NUMBER1COL").HasColumnType("number").IsOptional();
            Property(x => x.Number1Col2).HasColumnName(@"NUMBER1COL2").HasColumnType("number").IsOptional();
            Property(x => x.Number2Col).HasColumnName(@"NUMBER2COL").HasColumnType("number").IsOptional();
            Property(x => x.Number3Col).HasColumnName(@"NUMBER3COL").HasColumnType("number").IsOptional();
            Property(x => x.Number4Col).HasColumnName(@"NUMBER4COL").HasColumnType("number").IsOptional();
            Property(x => x.Number4Col2).HasColumnName(@"NUMBER4COL2").HasColumnType("number").IsOptional();
            Property(x => x.Number5Col).HasColumnName(@"NUMBER5COL").HasColumnType("number").IsOptional();
            Property(x => x.Number5Col2).HasColumnName(@"NUMBER5COL2").HasColumnType("number").IsOptional();
            Property(x => x.Number6Col).HasColumnName(@"NUMBER6COL").HasColumnType("number").IsOptional();
            Property(x => x.Number7Col).HasColumnName(@"NUMBER7COL").HasColumnType("number").IsOptional();
            Property(x => x.Number8Col).HasColumnName(@"NUMBER8COL").HasColumnType("number").IsOptional();
            Property(x => x.Number9Col).HasColumnName(@"NUMBER9COL").HasColumnType("number").IsOptional();
            Property(x => x.Number10Col).HasColumnName(@"NUMBER10COL").HasColumnType("number").IsOptional();
            Property(x => x.Number10Col2).HasColumnName(@"NUMBER10COL2").HasColumnType("number").IsOptional();
            Property(x => x.Number11Col).HasColumnName(@"NUMBER11COL").HasColumnType("number").IsOptional();
            Property(x => x.Number11Col2).HasColumnName(@"NUMBER11COL2").HasColumnType("number").IsOptional();
            Property(x => x.Number12Col).HasColumnName(@"NUMBER12COL").HasColumnType("number").IsOptional();
            Property(x => x.Number13Col).HasColumnName(@"NUMBER13COL").HasColumnType("number").IsOptional();
            Property(x => x.Number14Col).HasColumnName(@"NUMBER14COL").HasColumnType("number").IsOptional();
            Property(x => x.Number15Col).HasColumnName(@"NUMBER15COL").HasColumnType("number").IsOptional();
            Property(x => x.Number16Col).HasColumnName(@"NUMBER16COL").HasColumnType("number").IsOptional();
            Property(x => x.Number17Col).HasColumnName(@"NUMBER17COL").HasColumnType("number").IsOptional();
            Property(x => x.Number18Col).HasColumnName(@"NUMBER18COL").HasColumnType("number").IsOptional();
            Property(x => x.Number19Col).HasColumnName(@"NUMBER19COL").HasColumnType("number").IsOptional();
            Property(x => x.Number19Col2).HasColumnName(@"NUMBER19COL2").HasColumnType("number").IsOptional();
            Property(x => x.Number20Col).HasColumnName(@"NUMBER20COL").HasColumnType("number").IsOptional().HasPrecision(20,0);
            Property(x => x.Number20Col2).HasColumnName(@"NUMBER20COL2").HasColumnType("number").IsOptional().HasPrecision(20,0);
            Property(x => x.Number21Col).HasColumnName(@"NUMBER21COL").HasColumnType("number").IsOptional().HasPrecision(21,0);
            Property(x => x.Number22Col).HasColumnName(@"NUMBER22COL").HasColumnType("number").IsOptional().HasPrecision(22,0);
            Property(x => x.Number23Col).HasColumnName(@"NUMBER23COL").HasColumnType("number").IsOptional().HasPrecision(23,0);
            Property(x => x.Number24Col).HasColumnName(@"NUMBER24COL").HasColumnType("number").IsOptional().HasPrecision(24,0);
            Property(x => x.Number25Col).HasColumnName(@"NUMBER25COL").HasColumnType("number").IsOptional().HasPrecision(25,0);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    #endregion

}
// </auto-generated>

