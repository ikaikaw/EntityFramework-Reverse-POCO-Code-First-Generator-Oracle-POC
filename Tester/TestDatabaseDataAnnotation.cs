

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Tester\App.config"
//     Connection String Name: "MyDbContext"
//     Connection String:      "Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=win81)(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=XE)));User Id=efpoco;password=**zapped**;"
// ------------------------------------------------------------------------------------------------
// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace TestDatabaseDataAnnotation
{
    using Oracle.ManagedDataAccess.Client;
    using System.Linq;

    #region Unit of work

    public partial interface ITestDatabaseDataAnnotationDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<CountRy> CountRies { get; set; } // COUNTRIES
        System.Data.Entity.DbSet<Department> Departments { get; set; } // DEPARTMENTS
        System.Data.Entity.DbSet<Employee> Employees { get; set; } // EMPLOYEES
        System.Data.Entity.DbSet<Job> Jobs { get; set; } // JOBS
        System.Data.Entity.DbSet<JobHistory> JobHistories { get; set; } // JOB_HISTORY
        System.Data.Entity.DbSet<Location> Locations { get; set; } // LOCATIONS
        System.Data.Entity.DbSet<Region> Regions { get; set; } // REGIONS
        System.Data.Entity.DbSet<TypeCharTable> TypeCharTables { get; set; } // TYPE_CHAR_TABLE
        System.Data.Entity.DbSet<TypeDateTable> TypeDateTables { get; set; } // TYPE_DATE_TABLE
        System.Data.Entity.DbSet<TypeNumTable> TypeNumTables { get; set; } // TYPE_NUM_TABLE

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        decimal? TestFunc1();
        decimal? TestFunc2(decimal? pX, decimal? pY);
        decimal? TestFunc3(decimal? pX, decimal? pY, ref string pStr, out decimal? xZ);
        decimal? TestFunc4();
        string TestFunc5();
        decimal? TestPkgTestFunc3(decimal? pX, decimal? pY, ref string pStr, out decimal? xZ);
        string TestPkgTestFunc4(int returnValueCharLength);
        void TestPkgTestProc1(decimal? pX, decimal? pY, ref string pStr, out decimal? xZ);
        void TestPkgTypeNumProc();
        void TypeCharProc(string pCharcol, string pCharvaryingvar, string pCharactervar, string pCharactervaryingvar, string pNationalcharvaryvar, string pNationalcharactervaryingvar, string pNcharvar, string pNcharvaryingvar, string pNvarchar2Var, string pStringvar, string pVarcharvar, string pVarchar2Var, string pClobcol, string pNclobcol, out string xCharcol, int xCharcolCharLength, out string xCharvaryingvar, out string xCharactervar, int xCharactervarCharLength, out string xCharactervaryingvar, out string xNationalcharvaryvar, out string xNationalcharactervaryingvar, out string xNcharvar, int xNcharvarCharLength, out string xNcharvaryingvar, out string xNvarchar2Var, out string xStringvar, out string xVarcharvar, out string xVarchar2Var, out string xClobcol, out string xNclobcol);
        void TypeCharProcInout(ref string pCharcol, int pCharcolCharLength, ref string pCharvaryingvar, ref string pCharactervar, int pCharactervarCharLength, ref string pCharactervaryingvar, ref string pNationalcharvaryvar, ref string pNationalcharactervaryingvar, ref string pNcharvar, int pNcharvarCharLength, ref string pNcharvaryingvar, ref string pNvarchar2Var, ref string pStringvar, ref string pVarcharvar, ref string pVarchar2Var, ref string pClobcol, ref string pNclobcol);
        void TypeDateProc(System.DateTime? pDatecol, System.DateTime? pTimestampcol, System.DateTime? pDatedefaultcol, System.DateTime? pDatedefault2Col, System.DateTime? pTimestampdefaultcol, System.DateTime? pTimestampdefault2Col, System.DateTimeOffset? pTimestamptzcol, System.DateTime? pTimestampltzzcol, decimal? pIntervalyeartomonthcol, System.TimeSpan? pIntervaldaytoseccol, out System.DateTime? xDatecol, out System.DateTime? xTimestampcol, out System.DateTime? xDatedefaultcol, out System.DateTime? xDatedefault2Col, out System.DateTime? xTimestampdefaultcol, out System.DateTime? xTimestampdefault2Col, out System.DateTimeOffset? xTimestamptzcol, out System.DateTime? xTimestampltzzcol, out decimal? xIntervalyeartomonthcol, out System.TimeSpan? xIntervaldaytoseccol);
        void TypeDateProcInout(ref System.DateTime? pDatecol, ref System.DateTime? pTimestampcol);
        void TypeNumProc(decimal? pDecvar, decimal? pDecimalvar, decimal? pDoubleprecisionvar, decimal? pFloatvar, decimal? pIntvar, decimal? pIntegervar, int? pNaturalvar, int? pNaturalnvar, decimal? pNumberfvar, decimal? pNumericvar, int? pPlsvar, int? pBinaryvar, int? pPositivevar, int? pPositivenvar, decimal? pRealvar, int? pSigntypevar, decimal? pSmallintvar, double? pBinarydoublevar, float? pBinaryfloatvar, decimal? pNumber3Col, out decimal? xDecvar, out decimal? xDecimalvar, out decimal? xDoubleprecisionvar, out decimal? xFloatvar, out decimal? xIntvar, out decimal? xIntegervar, out int? xNaturalvar, out int? xNaturalnvar, out decimal? xNumberfvar, out decimal? xNumericvar, out int? xPlsvar, out int? xBinaryvar, out int? xPositivevar, out int? xPositivenvar, out decimal? xRealvar, out int? xSigntypevar, out decimal? xSmallintvar, out double? xBinarydoublevar, out float? xBinaryfloatvar, out decimal? xNumber3Col);
        void TypeNumProcInout(ref decimal? pDecvar, ref decimal? pDecimalvar, ref decimal? pDoubleprecisionvar, ref decimal? pFloatvar, ref decimal? pIntvar, ref decimal? pIntegervar, ref int? pNaturalvar, ref int? pNaturalnvar, ref decimal? pNumberfvar, ref decimal? pNumericvar, ref int? pPlsvar, ref int? pBinaryvar, ref int? pPositivevar, ref int? pPositivenvar, ref decimal? pRealvar, ref int? pSigntypevar, ref decimal? pSmallintvar, ref double? pBinarydoublevar, ref float? pBinaryfloatvar);
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TestDatabaseDataAnnotationDbContext : System.Data.Entity.DbContext, ITestDatabaseDataAnnotationDbContext
    {
        public System.Data.Entity.DbSet<CountRy> CountRies { get; set; } // COUNTRIES
        public System.Data.Entity.DbSet<Department> Departments { get; set; } // DEPARTMENTS
        public System.Data.Entity.DbSet<Employee> Employees { get; set; } // EMPLOYEES
        public System.Data.Entity.DbSet<Job> Jobs { get; set; } // JOBS
        public System.Data.Entity.DbSet<JobHistory> JobHistories { get; set; } // JOB_HISTORY
        public System.Data.Entity.DbSet<Location> Locations { get; set; } // LOCATIONS
        public System.Data.Entity.DbSet<Region> Regions { get; set; } // REGIONS
        public System.Data.Entity.DbSet<TypeCharTable> TypeCharTables { get; set; } // TYPE_CHAR_TABLE
        public System.Data.Entity.DbSet<TypeDateTable> TypeDateTables { get; set; } // TYPE_DATE_TABLE
        public System.Data.Entity.DbSet<TypeNumTable> TypeNumTables { get; set; } // TYPE_NUM_TABLE

        static TestDatabaseDataAnnotationDbContext()
        {
            System.Data.Entity.Database.SetInitializer<TestDatabaseDataAnnotationDbContext>(null);
        }

        public TestDatabaseDataAnnotationDbContext()
            : base("Name=MyDbContext")
        {
            InitializePartial();
        }

        public TestDatabaseDataAnnotationDbContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public TestDatabaseDataAnnotationDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public TestDatabaseDataAnnotationDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public TestDatabaseDataAnnotationDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            DisposePartial(disposing);
            base.Dispose(disposing);
        }

        public static bool IsSqlParameterNull(Oracle.ManagedDataAccess.Client.OracleParameter param)
        {
            var sqlValue = param.Value;
            var nullableValue = sqlValue as Oracle.ManagedDataAccess.Types.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }
        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new CountRyConfiguration());
            modelBuilder.Configurations.Add(new DepartmentConfiguration());
            modelBuilder.Configurations.Add(new EmployeeConfiguration());
            modelBuilder.Configurations.Add(new JobConfiguration());
            modelBuilder.Configurations.Add(new JobHistoryConfiguration());
            modelBuilder.Configurations.Add(new LocationConfiguration());
            modelBuilder.Configurations.Add(new RegionConfiguration());
            modelBuilder.Configurations.Add(new TypeCharTableConfiguration());
            modelBuilder.Configurations.Add(new TypeDateTableConfiguration());
            modelBuilder.Configurations.Add(new TypeNumTableConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new CountRyConfiguration(schema));
            modelBuilder.Configurations.Add(new DepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new EmployeeConfiguration(schema));
            modelBuilder.Configurations.Add(new JobConfiguration(schema));
            modelBuilder.Configurations.Add(new JobHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new LocationConfiguration(schema));
            modelBuilder.Configurations.Add(new RegionConfiguration(schema));
            modelBuilder.Configurations.Add(new TypeCharTableConfiguration(schema));
            modelBuilder.Configurations.Add(new TypeDateTableConfiguration(schema));
            modelBuilder.Configurations.Add(new TypeNumTableConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void DisposePartial(bool disposing);
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);

        // Stored Procedures
        public decimal? TestFunc1()
        {
            decimal? returnValue = null;
            var returnValueParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":returnValue", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.ReturnValue };

            try
            {
                if (Database.Connection.State != System.Data.ConnectionState.Open)
                {
                    Database.Connection.Open();
                }

                using (var cmd = Database.Connection.CreateCommand())
                {
                    var oracleCmd = (OracleCommand)cmd;
                    oracleCmd.BindByName = true;
                    oracleCmd.InitialLOBFetchSize = -1;
                    oracleCmd.InitialLONGFetchSize = -1;
					cmd.CommandType = System.Data.CommandType.Text;
					cmd.CommandText = "begin :returnValue := efpoco.test_func_1; end;";
					cmd.Parameters.AddRange(new[] {returnValueParam});

					cmd.ExecuteNonQuery();

                    if (IsSqlParameterNull(returnValueParam))
                        returnValue = null;
                    else
                        returnValue = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) returnValueParam.Value).Value;

            return returnValue;
                }
            }
            finally
            {
                if (Database.Connection.State == System.Data.ConnectionState.Open)
                {
                    try
                    {
                        Database.Connection.Close();
                    }
                    catch
                    {
                        // ignored
                    }
                }
            }

        }

        public decimal? TestFunc2(decimal? pX, decimal? pY)
        {
            decimal? returnValue = null;
            var returnValueParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":returnValue", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.ReturnValue };
            var pXParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_X", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = pX.GetValueOrDefault() };
            if (!pX.HasValue)
                pXParam.Value = System.DBNull.Value;

            var pYParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_Y", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = pY.GetValueOrDefault() };
            if (!pY.HasValue)
                pYParam.Value = System.DBNull.Value;


            try
            {
                if (Database.Connection.State != System.Data.ConnectionState.Open)
                {
                    Database.Connection.Open();
                }

                using (var cmd = Database.Connection.CreateCommand())
                {
                    var oracleCmd = (OracleCommand)cmd;
                    oracleCmd.BindByName = true;
                    oracleCmd.InitialLOBFetchSize = -1;
                    oracleCmd.InitialLONGFetchSize = -1;
					cmd.CommandType = System.Data.CommandType.Text;
					cmd.CommandText = "begin :returnValue := efpoco.test_func_2(:P_X, :P_Y); end;";
					cmd.Parameters.AddRange(new[] {returnValueParam, pXParam, pYParam});

					cmd.ExecuteNonQuery();

                    if (IsSqlParameterNull(returnValueParam))
                        returnValue = null;
                    else
                        returnValue = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) returnValueParam.Value).Value;

            return returnValue;
                }
            }
            finally
            {
                if (Database.Connection.State == System.Data.ConnectionState.Open)
                {
                    try
                    {
                        Database.Connection.Close();
                    }
                    catch
                    {
                        // ignored
                    }
                }
            }

        }

        public decimal? TestFunc3(decimal? pX, decimal? pY, ref string pStr, out decimal? xZ)
        {
            decimal? returnValue = null;
            xZ = null;

            var returnValueParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":returnValue", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.ReturnValue };
            var pXParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_X", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = pX.GetValueOrDefault() };
            if (!pX.HasValue)
                pXParam.Value = System.DBNull.Value;

            var pYParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_Y", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = pY.GetValueOrDefault() };
            if (!pY.HasValue)
                pYParam.Value = System.DBNull.Value;

            var pStrParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_STR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.InputOutput, Value = pStr, Size = 32767 };
            var xZParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_Z", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Output };

            try
            {
                if (Database.Connection.State != System.Data.ConnectionState.Open)
                {
                    Database.Connection.Open();
                }

                using (var cmd = Database.Connection.CreateCommand())
                {
                    var oracleCmd = (OracleCommand)cmd;
                    oracleCmd.BindByName = true;
                    oracleCmd.InitialLOBFetchSize = -1;
                    oracleCmd.InitialLONGFetchSize = -1;
					cmd.CommandType = System.Data.CommandType.Text;
					cmd.CommandText = "begin :returnValue := efpoco.test_func_3(:P_X, :P_Y, :P_STR, :X_Z); end;";
					cmd.Parameters.AddRange(new[] {returnValueParam, pXParam, pYParam, pStrParam, xZParam});

					cmd.ExecuteNonQuery();

                    if (IsSqlParameterNull(returnValueParam))
                        returnValue = null;
                    else
                        returnValue = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) returnValueParam.Value).Value;

                    if (IsSqlParameterNull(pStrParam))
                        pStr = default(string);
                    else
                        pStr = (string) ((Oracle.ManagedDataAccess.Types.OracleString) pStrParam.Value).Value;

                    if (IsSqlParameterNull(xZParam))
                        xZ = null;
                    else
                        xZ = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xZParam.Value).Value;

            return returnValue;
                }
            }
            finally
            {
                if (Database.Connection.State == System.Data.ConnectionState.Open)
                {
                    try
                    {
                        Database.Connection.Close();
                    }
                    catch
                    {
                        // ignored
                    }
                }
            }

        }

        public decimal? TestFunc4()
        {
            decimal? returnValue = null;
            var returnValueParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":returnValue", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.ReturnValue };

            try
            {
                if (Database.Connection.State != System.Data.ConnectionState.Open)
                {
                    Database.Connection.Open();
                }

                using (var cmd = Database.Connection.CreateCommand())
                {
                    var oracleCmd = (OracleCommand)cmd;
                    oracleCmd.BindByName = true;
                    oracleCmd.InitialLOBFetchSize = -1;
                    oracleCmd.InitialLONGFetchSize = -1;
					cmd.CommandType = System.Data.CommandType.Text;
					cmd.CommandText = "begin :returnValue := efpoco.test_func_4; end;";
					cmd.Parameters.AddRange(new[] {returnValueParam});

					cmd.ExecuteNonQuery();

                    if (IsSqlParameterNull(returnValueParam))
                        returnValue = null;
                    else
                        returnValue = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) returnValueParam.Value).Value;

            return returnValue;
                }
            }
            finally
            {
                if (Database.Connection.State == System.Data.ConnectionState.Open)
                {
                    try
                    {
                        Database.Connection.Close();
                    }
                    catch
                    {
                        // ignored
                    }
                }
            }

        }

        public string TestFunc5()
        {
            string returnValue = null;
            var returnValueParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":returnValue", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.ReturnValue, Size = 32767 };

            try
            {
                if (Database.Connection.State != System.Data.ConnectionState.Open)
                {
                    Database.Connection.Open();
                }

                using (var cmd = Database.Connection.CreateCommand())
                {
                    var oracleCmd = (OracleCommand)cmd;
                    oracleCmd.BindByName = true;
                    oracleCmd.InitialLOBFetchSize = -1;
                    oracleCmd.InitialLONGFetchSize = -1;
					cmd.CommandType = System.Data.CommandType.Text;
					cmd.CommandText = "begin :returnValue := efpoco.test_func_5; end;";
					cmd.Parameters.AddRange(new[] {returnValueParam});

					cmd.ExecuteNonQuery();

                    if (IsSqlParameterNull(returnValueParam))
                        returnValue = default(string);
                    else
                        returnValue = (string) ((Oracle.ManagedDataAccess.Types.OracleString) returnValueParam.Value).Value;

            return returnValue;
                }
            }
            finally
            {
                if (Database.Connection.State == System.Data.ConnectionState.Open)
                {
                    try
                    {
                        Database.Connection.Close();
                    }
                    catch
                    {
                        // ignored
                    }
                }
            }

        }

        public decimal? TestPkgTestFunc3(decimal? pX, decimal? pY, ref string pStr, out decimal? xZ)
        {
            decimal? returnValue = null;
            xZ = null;

            var returnValueParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":returnValue", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.ReturnValue };
            var pXParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_X", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = pX.GetValueOrDefault() };
            if (!pX.HasValue)
                pXParam.Value = System.DBNull.Value;

            var pYParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_Y", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = pY.GetValueOrDefault() };
            if (!pY.HasValue)
                pYParam.Value = System.DBNull.Value;

            var pStrParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_STR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.InputOutput, Value = pStr, Size = 32767 };
            var xZParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_Z", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Output };

            try
            {
                if (Database.Connection.State != System.Data.ConnectionState.Open)
                {
                    Database.Connection.Open();
                }

                using (var cmd = Database.Connection.CreateCommand())
                {
                    var oracleCmd = (OracleCommand)cmd;
                    oracleCmd.BindByName = true;
                    oracleCmd.InitialLOBFetchSize = -1;
                    oracleCmd.InitialLONGFetchSize = -1;
					cmd.CommandType = System.Data.CommandType.Text;
					cmd.CommandText = "begin :returnValue := efpoco.test_pkg.test_func_3(:P_X, :P_Y, :P_STR, :X_Z); end;";
					cmd.Parameters.AddRange(new[] {returnValueParam, pXParam, pYParam, pStrParam, xZParam});

					cmd.ExecuteNonQuery();

                    if (IsSqlParameterNull(returnValueParam))
                        returnValue = null;
                    else
                        returnValue = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) returnValueParam.Value).Value;

                    if (IsSqlParameterNull(pStrParam))
                        pStr = default(string);
                    else
                        pStr = (string) ((Oracle.ManagedDataAccess.Types.OracleString) pStrParam.Value).Value;

                    if (IsSqlParameterNull(xZParam))
                        xZ = null;
                    else
                        xZ = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xZParam.Value).Value;

            return returnValue;
                }
            }
            finally
            {
                if (Database.Connection.State == System.Data.ConnectionState.Open)
                {
                    try
                    {
                        Database.Connection.Close();
                    }
                    catch
                    {
                        // ignored
                    }
                }
            }

        }

        public string TestPkgTestFunc4(int returnValueCharLength)
        {
            string returnValue = null;
            var returnValueParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":returnValue", OracleDbType = OracleDbType.Char, Direction = System.Data.ParameterDirection.ReturnValue, Size = returnValueCharLength };

            try
            {
                if (Database.Connection.State != System.Data.ConnectionState.Open)
                {
                    Database.Connection.Open();
                }

                using (var cmd = Database.Connection.CreateCommand())
                {
                    var oracleCmd = (OracleCommand)cmd;
                    oracleCmd.BindByName = true;
                    oracleCmd.InitialLOBFetchSize = -1;
                    oracleCmd.InitialLONGFetchSize = -1;
					cmd.CommandType = System.Data.CommandType.Text;
					cmd.CommandText = "begin :returnValue := efpoco.test_pkg.test_func_4; end;";
					cmd.Parameters.AddRange(new[] {returnValueParam});

					cmd.ExecuteNonQuery();

                    if (IsSqlParameterNull(returnValueParam))
                        returnValue = default(string);
                    else
                        returnValue = (string) ((Oracle.ManagedDataAccess.Types.OracleString) returnValueParam.Value).Value;

            return returnValue;
                }
            }
            finally
            {
                if (Database.Connection.State == System.Data.ConnectionState.Open)
                {
                    try
                    {
                        Database.Connection.Close();
                    }
                    catch
                    {
                        // ignored
                    }
                }
            }

        }

        public void TestPkgTestProc1(decimal? pX, decimal? pY, ref string pStr, out decimal? xZ)
        {
            xZ = null;

            var pXParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_X", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = pX.GetValueOrDefault() };
            if (!pX.HasValue)
                pXParam.Value = System.DBNull.Value;

            var pYParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_Y", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = pY.GetValueOrDefault() };
            if (!pY.HasValue)
                pYParam.Value = System.DBNull.Value;

            var pStrParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_STR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.InputOutput, Value = pStr, Size = 32767 };
            var xZParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_Z", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Output };

            try
            {
                if (Database.Connection.State != System.Data.ConnectionState.Open)
                {
                    Database.Connection.Open();
                }

                using (var cmd = Database.Connection.CreateCommand())
                {
                    var oracleCmd = (OracleCommand)cmd;
                    oracleCmd.BindByName = true;
                    oracleCmd.InitialLOBFetchSize = -1;
                    oracleCmd.InitialLONGFetchSize = -1;
					cmd.CommandType = System.Data.CommandType.Text;
					cmd.CommandText = "begin efpoco.test_pkg.test_proc_1(:P_X, :P_Y, :P_STR, :X_Z); end;";
					cmd.Parameters.AddRange(new[] {pXParam, pYParam, pStrParam, xZParam});

					cmd.ExecuteNonQuery();

                    if (IsSqlParameterNull(pStrParam))
                        pStr = default(string);
                    else
                        pStr = (string) ((Oracle.ManagedDataAccess.Types.OracleString) pStrParam.Value).Value;

                    if (IsSqlParameterNull(xZParam))
                        xZ = null;
                    else
                        xZ = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xZParam.Value).Value;

                }
            }
            finally
            {
                if (Database.Connection.State == System.Data.ConnectionState.Open)
                {
                    try
                    {
                        Database.Connection.Close();
                    }
                    catch
                    {
                        // ignored
                    }
                }
            }

        }

        public void TestPkgTypeNumProc()
        {
            try
            {
                if (Database.Connection.State != System.Data.ConnectionState.Open)
                {
                    Database.Connection.Open();
                }

                using (var cmd = Database.Connection.CreateCommand())
                {
                    var oracleCmd = (OracleCommand)cmd;
                    oracleCmd.BindByName = true;
                    oracleCmd.InitialLOBFetchSize = -1;
                    oracleCmd.InitialLONGFetchSize = -1;
					cmd.CommandType = System.Data.CommandType.Text;
					cmd.CommandText = "begin efpoco.test_pkg.type_num_proc; end;";
					

					cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (Database.Connection.State == System.Data.ConnectionState.Open)
                {
                    try
                    {
                        Database.Connection.Close();
                    }
                    catch
                    {
                        // ignored
                    }
                }
            }

        }

        public void TypeCharProc(string pCharcol, string pCharvaryingvar, string pCharactervar, string pCharactervaryingvar, string pNationalcharvaryvar, string pNationalcharactervaryingvar, string pNcharvar, string pNcharvaryingvar, string pNvarchar2Var, string pStringvar, string pVarcharvar, string pVarchar2Var, string pClobcol, string pNclobcol, out string xCharcol, int xCharcolCharLength, out string xCharvaryingvar, out string xCharactervar, int xCharactervarCharLength, out string xCharactervaryingvar, out string xNationalcharvaryvar, out string xNationalcharactervaryingvar, out string xNcharvar, int xNcharvarCharLength, out string xNcharvaryingvar, out string xNvarchar2Var, out string xStringvar, out string xVarcharvar, out string xVarchar2Var, out string xClobcol, out string xNclobcol)
        {
            xCharcol = null;
            xCharvaryingvar = null;
            xCharactervar = null;
            xCharactervaryingvar = null;
            xNationalcharvaryvar = null;
            xNationalcharactervaryingvar = null;
            xNcharvar = null;
            xNcharvaryingvar = null;
            xNvarchar2Var = null;
            xStringvar = null;
            xVarcharvar = null;
            xVarchar2Var = null;
            xClobcol = null;
            xNclobcol = null;

            var pCharcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_CHARCOL", OracleDbType = OracleDbType.Char, Direction = System.Data.ParameterDirection.Input, Value = pCharcol, Size = pCharcol.Length };
            if (pCharcolParam.Value == null)
                pCharcolParam.Value = System.DBNull.Value;

            var pCharvaryingvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_CHARVARYINGVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.Input, Value = pCharvaryingvar, Size = pCharvaryingvar.Length };
            if (pCharvaryingvarParam.Value == null)
                pCharvaryingvarParam.Value = System.DBNull.Value;

            var pCharactervarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_CHARACTERVAR", OracleDbType = OracleDbType.Char, Direction = System.Data.ParameterDirection.Input, Value = pCharactervar, Size = pCharactervar.Length };
            if (pCharactervarParam.Value == null)
                pCharactervarParam.Value = System.DBNull.Value;

            var pCharactervaryingvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_CHARACTERVARYINGVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.Input, Value = pCharactervaryingvar, Size = pCharactervaryingvar.Length };
            if (pCharactervaryingvarParam.Value == null)
                pCharactervaryingvarParam.Value = System.DBNull.Value;

            var pNationalcharvaryvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NATIONALCHARVARYVAR", OracleDbType = OracleDbType.NVarchar2, Direction = System.Data.ParameterDirection.Input, Value = pNationalcharvaryvar, Size = pNationalcharvaryvar.Length };
            if (pNationalcharvaryvarParam.Value == null)
                pNationalcharvaryvarParam.Value = System.DBNull.Value;

            var pNationalcharactervaryingvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NATIONALCHARACTERVARYINGVAR", OracleDbType = OracleDbType.NVarchar2, Direction = System.Data.ParameterDirection.Input, Value = pNationalcharactervaryingvar, Size = pNationalcharactervaryingvar.Length };
            if (pNationalcharactervaryingvarParam.Value == null)
                pNationalcharactervaryingvarParam.Value = System.DBNull.Value;

            var pNcharvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NCHARVAR", OracleDbType = OracleDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = pNcharvar, Size = pNcharvar.Length };
            if (pNcharvarParam.Value == null)
                pNcharvarParam.Value = System.DBNull.Value;

            var pNcharvaryingvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NCHARVARYINGVAR", OracleDbType = OracleDbType.NVarchar2, Direction = System.Data.ParameterDirection.Input, Value = pNcharvaryingvar, Size = pNcharvaryingvar.Length };
            if (pNcharvaryingvarParam.Value == null)
                pNcharvaryingvarParam.Value = System.DBNull.Value;

            var pNvarchar2VarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NVARCHAR2VAR", OracleDbType = OracleDbType.NVarchar2, Direction = System.Data.ParameterDirection.Input, Value = pNvarchar2Var, Size = pNvarchar2Var.Length };
            if (pNvarchar2VarParam.Value == null)
                pNvarchar2VarParam.Value = System.DBNull.Value;

            var pStringvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_STRINGVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.Input, Value = pStringvar, Size = pStringvar.Length };
            if (pStringvarParam.Value == null)
                pStringvarParam.Value = System.DBNull.Value;

            var pVarcharvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_VARCHARVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.Input, Value = pVarcharvar, Size = pVarcharvar.Length };
            if (pVarcharvarParam.Value == null)
                pVarcharvarParam.Value = System.DBNull.Value;

            var pVarchar2VarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_VARCHAR2VAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.Input, Value = pVarchar2Var, Size = pVarchar2Var.Length };
            if (pVarchar2VarParam.Value == null)
                pVarchar2VarParam.Value = System.DBNull.Value;

            var pClobcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_CLOBCOL", OracleDbType = OracleDbType.Clob, Direction = System.Data.ParameterDirection.Input, Value = pClobcol };
            if (pClobcolParam.Value == null)
                pClobcolParam.Value = System.DBNull.Value;

            var pNclobcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NCLOBCOL", OracleDbType = OracleDbType.NClob, Direction = System.Data.ParameterDirection.Input, Value = pNclobcol };
            if (pNclobcolParam.Value == null)
                pNclobcolParam.Value = System.DBNull.Value;

            var xCharcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_CHARCOL", OracleDbType = OracleDbType.Char, Direction = System.Data.ParameterDirection.Output, Size = xCharcolCharLength };
            var xCharvaryingvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_CHARVARYINGVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.Output, Size = 32767 };
            var xCharactervarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_CHARACTERVAR", OracleDbType = OracleDbType.Char, Direction = System.Data.ParameterDirection.Output, Size = xCharactervarCharLength };
            var xCharactervaryingvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_CHARACTERVARYINGVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.Output, Size = 32767 };
            var xNationalcharvaryvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_NATIONALCHARVARYVAR", OracleDbType = OracleDbType.NVarchar2, Direction = System.Data.ParameterDirection.Output, Size = 32767 };
            var xNationalcharactervaryingvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_NATIONALCHARACTERVARYINGVAR", OracleDbType = OracleDbType.NVarchar2, Direction = System.Data.ParameterDirection.Output, Size = 32767 };
            var xNcharvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_NCHARVAR", OracleDbType = OracleDbType.NChar, Direction = System.Data.ParameterDirection.Output, Size = xNcharvarCharLength };
            var xNcharvaryingvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_NCHARVARYINGVAR", OracleDbType = OracleDbType.NVarchar2, Direction = System.Data.ParameterDirection.Output, Size = 32767 };
            var xNvarchar2VarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_NVARCHAR2VAR", OracleDbType = OracleDbType.NVarchar2, Direction = System.Data.ParameterDirection.Output, Size = 32767 };
            var xStringvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_STRINGVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.Output, Size = 32767 };
            var xVarcharvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_VARCHARVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.Output, Size = 32767 };
            var xVarchar2VarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_VARCHAR2VAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.Output, Size = 32767 };
            var xClobcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_CLOBCOL", OracleDbType = OracleDbType.Clob, Direction = System.Data.ParameterDirection.Output };
            var xNclobcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_NCLOBCOL", OracleDbType = OracleDbType.NClob, Direction = System.Data.ParameterDirection.Output };

            try
            {
                if (Database.Connection.State != System.Data.ConnectionState.Open)
                {
                    Database.Connection.Open();
                }

                using (var cmd = Database.Connection.CreateCommand())
                {
                    var oracleCmd = (OracleCommand)cmd;
                    oracleCmd.BindByName = true;
                    oracleCmd.InitialLOBFetchSize = -1;
                    oracleCmd.InitialLONGFetchSize = -1;
					cmd.CommandType = System.Data.CommandType.Text;
					cmd.CommandText = "begin efpoco.type_char_proc(:P_CHARCOL, :P_CHARVARYINGVAR, :P_CHARACTERVAR, :P_CHARACTERVARYINGVAR, :P_NATIONALCHARVARYVAR, :P_NATIONALCHARACTERVARYINGVAR, :P_NCHARVAR, :P_NCHARVARYINGVAR, :P_NVARCHAR2VAR, :P_STRINGVAR, :P_VARCHARVAR, :P_VARCHAR2VAR, :P_CLOBCOL, :P_NCLOBCOL, :X_CHARCOL, :X_CHARVARYINGVAR, :X_CHARACTERVAR, :X_CHARACTERVARYINGVAR, :X_NATIONALCHARVARYVAR, :X_NATIONALCHARACTERVARYINGVAR, :X_NCHARVAR, :X_NCHARVARYINGVAR, :X_NVARCHAR2VAR, :X_STRINGVAR, :X_VARCHARVAR, :X_VARCHAR2VAR, :X_CLOBCOL, :X_NCLOBCOL); end;";
					cmd.Parameters.AddRange(new[] {pCharcolParam, pCharvaryingvarParam, pCharactervarParam, pCharactervaryingvarParam, pNationalcharvaryvarParam, pNationalcharactervaryingvarParam, pNcharvarParam, pNcharvaryingvarParam, pNvarchar2VarParam, pStringvarParam, pVarcharvarParam, pVarchar2VarParam, pClobcolParam, pNclobcolParam, xCharcolParam, xCharvaryingvarParam, xCharactervarParam, xCharactervaryingvarParam, xNationalcharvaryvarParam, xNationalcharactervaryingvarParam, xNcharvarParam, xNcharvaryingvarParam, xNvarchar2VarParam, xStringvarParam, xVarcharvarParam, xVarchar2VarParam, xClobcolParam, xNclobcolParam});

					cmd.ExecuteNonQuery();

                    if (IsSqlParameterNull(xCharcolParam))
                        xCharcol = default(string);
                    else
                        xCharcol = (string) ((Oracle.ManagedDataAccess.Types.OracleString) xCharcolParam.Value).Value;

                    if (IsSqlParameterNull(xCharvaryingvarParam))
                        xCharvaryingvar = default(string);
                    else
                        xCharvaryingvar = (string) ((Oracle.ManagedDataAccess.Types.OracleString) xCharvaryingvarParam.Value).Value;

                    if (IsSqlParameterNull(xCharactervarParam))
                        xCharactervar = default(string);
                    else
                        xCharactervar = (string) ((Oracle.ManagedDataAccess.Types.OracleString) xCharactervarParam.Value).Value;

                    if (IsSqlParameterNull(xCharactervaryingvarParam))
                        xCharactervaryingvar = default(string);
                    else
                        xCharactervaryingvar = (string) ((Oracle.ManagedDataAccess.Types.OracleString) xCharactervaryingvarParam.Value).Value;

                    if (IsSqlParameterNull(xNationalcharvaryvarParam))
                        xNationalcharvaryvar = default(string);
                    else
                        xNationalcharvaryvar = (string) ((Oracle.ManagedDataAccess.Types.OracleString) xNationalcharvaryvarParam.Value).Value;

                    if (IsSqlParameterNull(xNationalcharactervaryingvarParam))
                        xNationalcharactervaryingvar = default(string);
                    else
                        xNationalcharactervaryingvar = (string) ((Oracle.ManagedDataAccess.Types.OracleString) xNationalcharactervaryingvarParam.Value).Value;

                    if (IsSqlParameterNull(xNcharvarParam))
                        xNcharvar = default(string);
                    else
                        xNcharvar = (string) ((Oracle.ManagedDataAccess.Types.OracleString) xNcharvarParam.Value).Value;

                    if (IsSqlParameterNull(xNcharvaryingvarParam))
                        xNcharvaryingvar = default(string);
                    else
                        xNcharvaryingvar = (string) ((Oracle.ManagedDataAccess.Types.OracleString) xNcharvaryingvarParam.Value).Value;

                    if (IsSqlParameterNull(xNvarchar2VarParam))
                        xNvarchar2Var = default(string);
                    else
                        xNvarchar2Var = (string) ((Oracle.ManagedDataAccess.Types.OracleString) xNvarchar2VarParam.Value).Value;

                    if (IsSqlParameterNull(xStringvarParam))
                        xStringvar = default(string);
                    else
                        xStringvar = (string) ((Oracle.ManagedDataAccess.Types.OracleString) xStringvarParam.Value).Value;

                    if (IsSqlParameterNull(xVarcharvarParam))
                        xVarcharvar = default(string);
                    else
                        xVarcharvar = (string) ((Oracle.ManagedDataAccess.Types.OracleString) xVarcharvarParam.Value).Value;

                    if (IsSqlParameterNull(xVarchar2VarParam))
                        xVarchar2Var = default(string);
                    else
                        xVarchar2Var = (string) ((Oracle.ManagedDataAccess.Types.OracleString) xVarchar2VarParam.Value).Value;

                    if (IsSqlParameterNull(xClobcolParam))
                        xClobcol = default(string);
                    else
                        xClobcol = (string) ((Oracle.ManagedDataAccess.Types.OracleClob) xClobcolParam.Value).Value;

                    if (IsSqlParameterNull(xNclobcolParam))
                        xNclobcol = default(string);
                    else
                        xNclobcol = (string) ((Oracle.ManagedDataAccess.Types.OracleClob) xNclobcolParam.Value).Value;

                }
            }
            finally
            {
                if (Database.Connection.State == System.Data.ConnectionState.Open)
                {
                    try
                    {
                        Database.Connection.Close();
                    }
                    catch
                    {
                        // ignored
                    }
                }
            }

        }

        public void TypeCharProcInout(ref string pCharcol, int pCharcolCharLength, ref string pCharvaryingvar, ref string pCharactervar, int pCharactervarCharLength, ref string pCharactervaryingvar, ref string pNationalcharvaryvar, ref string pNationalcharactervaryingvar, ref string pNcharvar, int pNcharvarCharLength, ref string pNcharvaryingvar, ref string pNvarchar2Var, ref string pStringvar, ref string pVarcharvar, ref string pVarchar2Var, ref string pClobcol, ref string pNclobcol)
        {
            var pCharcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_CHARCOL", OracleDbType = OracleDbType.Char, Direction = System.Data.ParameterDirection.InputOutput, Value = pCharcol, Size = pCharcolCharLength };
            var pCharvaryingvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_CHARVARYINGVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.InputOutput, Value = pCharvaryingvar, Size = 32767 };
            var pCharactervarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_CHARACTERVAR", OracleDbType = OracleDbType.Char, Direction = System.Data.ParameterDirection.InputOutput, Value = pCharactervar, Size = pCharactervarCharLength };
            var pCharactervaryingvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_CHARACTERVARYINGVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.InputOutput, Value = pCharactervaryingvar, Size = 32767 };
            var pNationalcharvaryvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NATIONALCHARVARYVAR", OracleDbType = OracleDbType.NVarchar2, Direction = System.Data.ParameterDirection.InputOutput, Value = pNationalcharvaryvar, Size = 32767 };
            var pNationalcharactervaryingvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NATIONALCHARACTERVARYINGVAR", OracleDbType = OracleDbType.NVarchar2, Direction = System.Data.ParameterDirection.InputOutput, Value = pNationalcharactervaryingvar, Size = 32767 };
            var pNcharvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NCHARVAR", OracleDbType = OracleDbType.NChar, Direction = System.Data.ParameterDirection.InputOutput, Value = pNcharvar, Size = pNcharvarCharLength };
            var pNcharvaryingvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NCHARVARYINGVAR", OracleDbType = OracleDbType.NVarchar2, Direction = System.Data.ParameterDirection.InputOutput, Value = pNcharvaryingvar, Size = 32767 };
            var pNvarchar2VarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NVARCHAR2VAR", OracleDbType = OracleDbType.NVarchar2, Direction = System.Data.ParameterDirection.InputOutput, Value = pNvarchar2Var, Size = 32767 };
            var pStringvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_STRINGVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.InputOutput, Value = pStringvar, Size = 32767 };
            var pVarcharvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_VARCHARVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.InputOutput, Value = pVarcharvar, Size = 32767 };
            var pVarchar2VarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_VARCHAR2VAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.InputOutput, Value = pVarchar2Var, Size = 32767 };
            var pClobcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_CLOBCOL", OracleDbType = OracleDbType.Clob, Direction = System.Data.ParameterDirection.InputOutput, Value = pClobcol };
            var pNclobcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NCLOBCOL", OracleDbType = OracleDbType.NClob, Direction = System.Data.ParameterDirection.InputOutput, Value = pNclobcol };

            try
            {
                if (Database.Connection.State != System.Data.ConnectionState.Open)
                {
                    Database.Connection.Open();
                }

                using (var cmd = Database.Connection.CreateCommand())
                {
                    var oracleCmd = (OracleCommand)cmd;
                    oracleCmd.BindByName = true;
                    oracleCmd.InitialLOBFetchSize = -1;
                    oracleCmd.InitialLONGFetchSize = -1;
					cmd.CommandType = System.Data.CommandType.Text;
					cmd.CommandText = "begin efpoco.type_char_proc_inout(:P_CHARCOL, :P_CHARVARYINGVAR, :P_CHARACTERVAR, :P_CHARACTERVARYINGVAR, :P_NATIONALCHARVARYVAR, :P_NATIONALCHARACTERVARYINGVAR, :P_NCHARVAR, :P_NCHARVARYINGVAR, :P_NVARCHAR2VAR, :P_STRINGVAR, :P_VARCHARVAR, :P_VARCHAR2VAR, :P_CLOBCOL, :P_NCLOBCOL); end;";
					cmd.Parameters.AddRange(new[] {pCharcolParam, pCharvaryingvarParam, pCharactervarParam, pCharactervaryingvarParam, pNationalcharvaryvarParam, pNationalcharactervaryingvarParam, pNcharvarParam, pNcharvaryingvarParam, pNvarchar2VarParam, pStringvarParam, pVarcharvarParam, pVarchar2VarParam, pClobcolParam, pNclobcolParam});

					cmd.ExecuteNonQuery();

                    if (IsSqlParameterNull(pCharcolParam))
                        pCharcol = default(string);
                    else
                        pCharcol = (string) ((Oracle.ManagedDataAccess.Types.OracleString) pCharcolParam.Value).Value;

                    if (IsSqlParameterNull(pCharvaryingvarParam))
                        pCharvaryingvar = default(string);
                    else
                        pCharvaryingvar = (string) ((Oracle.ManagedDataAccess.Types.OracleString) pCharvaryingvarParam.Value).Value;

                    if (IsSqlParameterNull(pCharactervarParam))
                        pCharactervar = default(string);
                    else
                        pCharactervar = (string) ((Oracle.ManagedDataAccess.Types.OracleString) pCharactervarParam.Value).Value;

                    if (IsSqlParameterNull(pCharactervaryingvarParam))
                        pCharactervaryingvar = default(string);
                    else
                        pCharactervaryingvar = (string) ((Oracle.ManagedDataAccess.Types.OracleString) pCharactervaryingvarParam.Value).Value;

                    if (IsSqlParameterNull(pNationalcharvaryvarParam))
                        pNationalcharvaryvar = default(string);
                    else
                        pNationalcharvaryvar = (string) ((Oracle.ManagedDataAccess.Types.OracleString) pNationalcharvaryvarParam.Value).Value;

                    if (IsSqlParameterNull(pNationalcharactervaryingvarParam))
                        pNationalcharactervaryingvar = default(string);
                    else
                        pNationalcharactervaryingvar = (string) ((Oracle.ManagedDataAccess.Types.OracleString) pNationalcharactervaryingvarParam.Value).Value;

                    if (IsSqlParameterNull(pNcharvarParam))
                        pNcharvar = default(string);
                    else
                        pNcharvar = (string) ((Oracle.ManagedDataAccess.Types.OracleString) pNcharvarParam.Value).Value;

                    if (IsSqlParameterNull(pNcharvaryingvarParam))
                        pNcharvaryingvar = default(string);
                    else
                        pNcharvaryingvar = (string) ((Oracle.ManagedDataAccess.Types.OracleString) pNcharvaryingvarParam.Value).Value;

                    if (IsSqlParameterNull(pNvarchar2VarParam))
                        pNvarchar2Var = default(string);
                    else
                        pNvarchar2Var = (string) ((Oracle.ManagedDataAccess.Types.OracleString) pNvarchar2VarParam.Value).Value;

                    if (IsSqlParameterNull(pStringvarParam))
                        pStringvar = default(string);
                    else
                        pStringvar = (string) ((Oracle.ManagedDataAccess.Types.OracleString) pStringvarParam.Value).Value;

                    if (IsSqlParameterNull(pVarcharvarParam))
                        pVarcharvar = default(string);
                    else
                        pVarcharvar = (string) ((Oracle.ManagedDataAccess.Types.OracleString) pVarcharvarParam.Value).Value;

                    if (IsSqlParameterNull(pVarchar2VarParam))
                        pVarchar2Var = default(string);
                    else
                        pVarchar2Var = (string) ((Oracle.ManagedDataAccess.Types.OracleString) pVarchar2VarParam.Value).Value;

                    if (IsSqlParameterNull(pClobcolParam))
                        pClobcol = default(string);
                    else
                        pClobcol = (string) ((Oracle.ManagedDataAccess.Types.OracleClob) pClobcolParam.Value).Value;

                    if (IsSqlParameterNull(pNclobcolParam))
                        pNclobcol = default(string);
                    else
                        pNclobcol = (string) ((Oracle.ManagedDataAccess.Types.OracleClob) pNclobcolParam.Value).Value;

                }
            }
            finally
            {
                if (Database.Connection.State == System.Data.ConnectionState.Open)
                {
                    try
                    {
                        Database.Connection.Close();
                    }
                    catch
                    {
                        // ignored
                    }
                }
            }

        }

        public void TypeDateProc(System.DateTime? pDatecol, System.DateTime? pTimestampcol, System.DateTime? pDatedefaultcol, System.DateTime? pDatedefault2Col, System.DateTime? pTimestampdefaultcol, System.DateTime? pTimestampdefault2Col, System.DateTimeOffset? pTimestamptzcol, System.DateTime? pTimestampltzzcol, decimal? pIntervalyeartomonthcol, System.TimeSpan? pIntervaldaytoseccol, out System.DateTime? xDatecol, out System.DateTime? xTimestampcol, out System.DateTime? xDatedefaultcol, out System.DateTime? xDatedefault2Col, out System.DateTime? xTimestampdefaultcol, out System.DateTime? xTimestampdefault2Col, out System.DateTimeOffset? xTimestamptzcol, out System.DateTime? xTimestampltzzcol, out decimal? xIntervalyeartomonthcol, out System.TimeSpan? xIntervaldaytoseccol)
        {
            xDatecol = null;
            xTimestampcol = null;
            xDatedefaultcol = null;
            xDatedefault2Col = null;
            xTimestampdefaultcol = null;
            xTimestampdefault2Col = null;
            xTimestamptzcol = null;
            xTimestampltzzcol = null;
            xIntervalyeartomonthcol = null;
            xIntervaldaytoseccol = null;

            var pDatecolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_DATECOL", OracleDbType = OracleDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = pDatecol.GetValueOrDefault() };
            if (!pDatecol.HasValue)
                pDatecolParam.Value = System.DBNull.Value;

            var pTimestampcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_TIMESTAMPCOL", OracleDbType = OracleDbType.TimeStamp, Direction = System.Data.ParameterDirection.Input, Value = pTimestampcol.GetValueOrDefault() };
            if (!pTimestampcol.HasValue)
                pTimestampcolParam.Value = System.DBNull.Value;

            var pDatedefaultcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_DATEDEFAULTCOL", OracleDbType = OracleDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = pDatedefaultcol.GetValueOrDefault() };
            if (!pDatedefaultcol.HasValue)
                pDatedefaultcolParam.Value = System.DBNull.Value;

            var pDatedefault2ColParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_DATEDEFAULT2COL", OracleDbType = OracleDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = pDatedefault2Col.GetValueOrDefault() };
            if (!pDatedefault2Col.HasValue)
                pDatedefault2ColParam.Value = System.DBNull.Value;

            var pTimestampdefaultcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_TIMESTAMPDEFAULTCOL", OracleDbType = OracleDbType.TimeStamp, Direction = System.Data.ParameterDirection.Input, Value = pTimestampdefaultcol.GetValueOrDefault() };
            if (!pTimestampdefaultcol.HasValue)
                pTimestampdefaultcolParam.Value = System.DBNull.Value;

            var pTimestampdefault2ColParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_TIMESTAMPDEFAULT2COL", OracleDbType = OracleDbType.TimeStamp, Direction = System.Data.ParameterDirection.Input, Value = pTimestampdefault2Col.GetValueOrDefault() };
            if (!pTimestampdefault2Col.HasValue)
                pTimestampdefault2ColParam.Value = System.DBNull.Value;

            var pTimestamptzcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_TIMESTAMPTZCOL", OracleDbType = OracleDbType.TimeStampTZ, Direction = System.Data.ParameterDirection.Input, Value = pTimestamptzcol.GetValueOrDefault() };
            if (!pTimestamptzcol.HasValue)
                pTimestamptzcolParam.Value = System.DBNull.Value;

            var pTimestampltzzcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_TIMESTAMPLTZZCOL", OracleDbType = OracleDbType.TimeStampLTZ, Direction = System.Data.ParameterDirection.Input, Value = pTimestampltzzcol.GetValueOrDefault() };
            if (!pTimestampltzzcol.HasValue)
                pTimestampltzzcolParam.Value = System.DBNull.Value;

            var pIntervalyeartomonthcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_INTERVALYEARTOMONTHCOL", OracleDbType = OracleDbType.IntervalYM, Direction = System.Data.ParameterDirection.Input, Value = pIntervalyeartomonthcol.GetValueOrDefault() };
            if (!pIntervalyeartomonthcol.HasValue)
                pIntervalyeartomonthcolParam.Value = System.DBNull.Value;

            var pIntervaldaytoseccolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_INTERVALDAYTOSECCOL", OracleDbType = OracleDbType.IntervalDS, Direction = System.Data.ParameterDirection.Input, Value = pIntervaldaytoseccol.GetValueOrDefault() };
            if (!pIntervaldaytoseccol.HasValue)
                pIntervaldaytoseccolParam.Value = System.DBNull.Value;

            var xDatecolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_DATECOL", OracleDbType = OracleDbType.Date, Direction = System.Data.ParameterDirection.Output };
            var xTimestampcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_TIMESTAMPCOL", OracleDbType = OracleDbType.TimeStamp, Direction = System.Data.ParameterDirection.Output };
            var xDatedefaultcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_DATEDEFAULTCOL", OracleDbType = OracleDbType.Date, Direction = System.Data.ParameterDirection.Output };
            var xDatedefault2ColParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_DATEDEFAULT2COL", OracleDbType = OracleDbType.Date, Direction = System.Data.ParameterDirection.Output };
            var xTimestampdefaultcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_TIMESTAMPDEFAULTCOL", OracleDbType = OracleDbType.TimeStamp, Direction = System.Data.ParameterDirection.Output };
            var xTimestampdefault2ColParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_TIMESTAMPDEFAULT2COL", OracleDbType = OracleDbType.TimeStamp, Direction = System.Data.ParameterDirection.Output };
            var xTimestamptzcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_TIMESTAMPTZCOL", OracleDbType = OracleDbType.TimeStampTZ, Direction = System.Data.ParameterDirection.Output };
            var xTimestampltzzcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_TIMESTAMPLTZZCOL", OracleDbType = OracleDbType.TimeStampLTZ, Direction = System.Data.ParameterDirection.Output };
            var xIntervalyeartomonthcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_INTERVALYEARTOMONTHCOL", OracleDbType = OracleDbType.IntervalYM, Direction = System.Data.ParameterDirection.Output };
            var xIntervaldaytoseccolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_INTERVALDAYTOSECCOL", OracleDbType = OracleDbType.IntervalDS, Direction = System.Data.ParameterDirection.Output };

            try
            {
                if (Database.Connection.State != System.Data.ConnectionState.Open)
                {
                    Database.Connection.Open();
                }

                using (var cmd = Database.Connection.CreateCommand())
                {
                    var oracleCmd = (OracleCommand)cmd;
                    oracleCmd.BindByName = true;
                    oracleCmd.InitialLOBFetchSize = -1;
                    oracleCmd.InitialLONGFetchSize = -1;
					cmd.CommandType = System.Data.CommandType.Text;
					cmd.CommandText = "begin efpoco.type_date_proc(:P_DATECOL, :P_TIMESTAMPCOL, :P_DATEDEFAULTCOL, :P_DATEDEFAULT2COL, :P_TIMESTAMPDEFAULTCOL, :P_TIMESTAMPDEFAULT2COL, :P_TIMESTAMPTZCOL, :P_TIMESTAMPLTZZCOL, :P_INTERVALYEARTOMONTHCOL, :P_INTERVALDAYTOSECCOL, :X_DATECOL, :X_TIMESTAMPCOL, :X_DATEDEFAULTCOL, :X_DATEDEFAULT2COL, :X_TIMESTAMPDEFAULTCOL, :X_TIMESTAMPDEFAULT2COL, :X_TIMESTAMPTZCOL, :X_TIMESTAMPLTZZCOL, :X_INTERVALYEARTOMONTHCOL, :X_INTERVALDAYTOSECCOL); end;";
					cmd.Parameters.AddRange(new[] {pDatecolParam, pTimestampcolParam, pDatedefaultcolParam, pDatedefault2ColParam, pTimestampdefaultcolParam, pTimestampdefault2ColParam, pTimestamptzcolParam, pTimestampltzzcolParam, pIntervalyeartomonthcolParam, pIntervaldaytoseccolParam, xDatecolParam, xTimestampcolParam, xDatedefaultcolParam, xDatedefault2ColParam, xTimestampdefaultcolParam, xTimestampdefault2ColParam, xTimestamptzcolParam, xTimestampltzzcolParam, xIntervalyeartomonthcolParam, xIntervaldaytoseccolParam});

					cmd.ExecuteNonQuery();

                    if (IsSqlParameterNull(xDatecolParam))
                        xDatecol = null;
                    else
                        xDatecol = (System.DateTime) ((Oracle.ManagedDataAccess.Types.OracleDate) xDatecolParam.Value).Value;

                    if (IsSqlParameterNull(xTimestampcolParam))
                        xTimestampcol = null;
                    else
                        xTimestampcol = (System.DateTime) ((Oracle.ManagedDataAccess.Types.OracleTimeStamp) xTimestampcolParam.Value).Value;

                    if (IsSqlParameterNull(xDatedefaultcolParam))
                        xDatedefaultcol = null;
                    else
                        xDatedefaultcol = (System.DateTime) ((Oracle.ManagedDataAccess.Types.OracleDate) xDatedefaultcolParam.Value).Value;

                    if (IsSqlParameterNull(xDatedefault2ColParam))
                        xDatedefault2Col = null;
                    else
                        xDatedefault2Col = (System.DateTime) ((Oracle.ManagedDataAccess.Types.OracleDate) xDatedefault2ColParam.Value).Value;

                    if (IsSqlParameterNull(xTimestampdefaultcolParam))
                        xTimestampdefaultcol = null;
                    else
                        xTimestampdefaultcol = (System.DateTime) ((Oracle.ManagedDataAccess.Types.OracleTimeStamp) xTimestampdefaultcolParam.Value).Value;

                    if (IsSqlParameterNull(xTimestampdefault2ColParam))
                        xTimestampdefault2Col = null;
                    else
                        xTimestampdefault2Col = (System.DateTime) ((Oracle.ManagedDataAccess.Types.OracleTimeStamp) xTimestampdefault2ColParam.Value).Value;

                    if (IsSqlParameterNull(xTimestamptzcolParam))
                        xTimestamptzcol = null;
                    else
                        xTimestamptzcol = (System.DateTimeOffset) ((Oracle.ManagedDataAccess.Types.OracleTimeStampTZ) xTimestamptzcolParam.Value).Value;

                    if (IsSqlParameterNull(xTimestampltzzcolParam))
                        xTimestampltzzcol = null;
                    else
                        xTimestampltzzcol = (System.DateTime) ((Oracle.ManagedDataAccess.Types.OracleTimeStampLTZ) xTimestampltzzcolParam.Value).Value;

                    if (IsSqlParameterNull(xIntervalyeartomonthcolParam))
                        xIntervalyeartomonthcol = null;
                    else
                        xIntervalyeartomonthcol = (decimal) ((Oracle.ManagedDataAccess.Types.OracleIntervalYM) xIntervalyeartomonthcolParam.Value).Value;

                    if (IsSqlParameterNull(xIntervaldaytoseccolParam))
                        xIntervaldaytoseccol = null;
                    else
                        xIntervaldaytoseccol = (System.TimeSpan) ((Oracle.ManagedDataAccess.Types.OracleIntervalDS) xIntervaldaytoseccolParam.Value).Value;

                }
            }
            finally
            {
                if (Database.Connection.State == System.Data.ConnectionState.Open)
                {
                    try
                    {
                        Database.Connection.Close();
                    }
                    catch
                    {
                        // ignored
                    }
                }
            }

        }

        public void TypeDateProcInout(ref System.DateTime? pDatecol, ref System.DateTime? pTimestampcol)
        {
            var pDatecolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_DATECOL", OracleDbType = OracleDbType.Date, Direction = System.Data.ParameterDirection.InputOutput, Value = pDatecol.GetValueOrDefault() };
            var pTimestampcolParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_TIMESTAMPCOL", OracleDbType = OracleDbType.TimeStamp, Direction = System.Data.ParameterDirection.InputOutput, Value = pTimestampcol.GetValueOrDefault() };

            try
            {
                if (Database.Connection.State != System.Data.ConnectionState.Open)
                {
                    Database.Connection.Open();
                }

                using (var cmd = Database.Connection.CreateCommand())
                {
                    var oracleCmd = (OracleCommand)cmd;
                    oracleCmd.BindByName = true;
                    oracleCmd.InitialLOBFetchSize = -1;
                    oracleCmd.InitialLONGFetchSize = -1;
					cmd.CommandType = System.Data.CommandType.Text;
					cmd.CommandText = "begin efpoco.type_date_proc_inout(:P_DATECOL, :P_TIMESTAMPCOL); end;";
					cmd.Parameters.AddRange(new[] {pDatecolParam, pTimestampcolParam});

					cmd.ExecuteNonQuery();

                    if (IsSqlParameterNull(pDatecolParam))
                        pDatecol = null;
                    else
                        pDatecol = (System.DateTime) ((Oracle.ManagedDataAccess.Types.OracleDate) pDatecolParam.Value).Value;

                    if (IsSqlParameterNull(pTimestampcolParam))
                        pTimestampcol = null;
                    else
                        pTimestampcol = (System.DateTime) ((Oracle.ManagedDataAccess.Types.OracleTimeStamp) pTimestampcolParam.Value).Value;

                }
            }
            finally
            {
                if (Database.Connection.State == System.Data.ConnectionState.Open)
                {
                    try
                    {
                        Database.Connection.Close();
                    }
                    catch
                    {
                        // ignored
                    }
                }
            }

        }

        public void TypeNumProc(decimal? pDecvar, decimal? pDecimalvar, decimal? pDoubleprecisionvar, decimal? pFloatvar, decimal? pIntvar, decimal? pIntegervar, int? pNaturalvar, int? pNaturalnvar, decimal? pNumberfvar, decimal? pNumericvar, int? pPlsvar, int? pBinaryvar, int? pPositivevar, int? pPositivenvar, decimal? pRealvar, int? pSigntypevar, decimal? pSmallintvar, double? pBinarydoublevar, float? pBinaryfloatvar, decimal? pNumber3Col, out decimal? xDecvar, out decimal? xDecimalvar, out decimal? xDoubleprecisionvar, out decimal? xFloatvar, out decimal? xIntvar, out decimal? xIntegervar, out int? xNaturalvar, out int? xNaturalnvar, out decimal? xNumberfvar, out decimal? xNumericvar, out int? xPlsvar, out int? xBinaryvar, out int? xPositivevar, out int? xPositivenvar, out decimal? xRealvar, out int? xSigntypevar, out decimal? xSmallintvar, out double? xBinarydoublevar, out float? xBinaryfloatvar, out decimal? xNumber3Col)
        {
            xDecvar = null;
            xDecimalvar = null;
            xDoubleprecisionvar = null;
            xFloatvar = null;
            xIntvar = null;
            xIntegervar = null;
            xNaturalvar = null;
            xNaturalnvar = null;
            xNumberfvar = null;
            xNumericvar = null;
            xPlsvar = null;
            xBinaryvar = null;
            xPositivevar = null;
            xPositivenvar = null;
            xRealvar = null;
            xSigntypevar = null;
            xSmallintvar = null;
            xBinarydoublevar = null;
            xBinaryfloatvar = null;
            xNumber3Col = null;

            var pDecvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_DECVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = pDecvar.GetValueOrDefault() };
            if (!pDecvar.HasValue)
                pDecvarParam.Value = System.DBNull.Value;

            var pDecimalvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_DECIMALVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = pDecimalvar.GetValueOrDefault() };
            if (!pDecimalvar.HasValue)
                pDecimalvarParam.Value = System.DBNull.Value;

            var pDoubleprecisionvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_DOUBLEPRECISIONVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.Input, Value = pDoubleprecisionvar.GetValueOrDefault() };
            if (!pDoubleprecisionvar.HasValue)
                pDoubleprecisionvarParam.Value = System.DBNull.Value;

            var pFloatvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_FLOATVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.Input, Value = pFloatvar.GetValueOrDefault() };
            if (!pFloatvar.HasValue)
                pFloatvarParam.Value = System.DBNull.Value;

            var pIntvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_INTVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = pIntvar.GetValueOrDefault() };
            if (!pIntvar.HasValue)
                pIntvarParam.Value = System.DBNull.Value;

            var pIntegervarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_INTEGERVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = pIntegervar.GetValueOrDefault() };
            if (!pIntegervar.HasValue)
                pIntegervarParam.Value = System.DBNull.Value;

            var pNaturalvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NATURALVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.Input, Value = pNaturalvar.GetValueOrDefault() };
            if (!pNaturalvar.HasValue)
                pNaturalvarParam.Value = System.DBNull.Value;

            var pNaturalnvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NATURALNVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.Input, Value = pNaturalnvar.GetValueOrDefault() };
            if (!pNaturalnvar.HasValue)
                pNaturalnvarParam.Value = System.DBNull.Value;

            var pNumberfvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NUMBERFVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = pNumberfvar.GetValueOrDefault() };
            if (!pNumberfvar.HasValue)
                pNumberfvarParam.Value = System.DBNull.Value;

            var pNumericvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NUMERICVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = pNumericvar.GetValueOrDefault() };
            if (!pNumericvar.HasValue)
                pNumericvarParam.Value = System.DBNull.Value;

            var pPlsvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_PLSVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.Input, Value = pPlsvar.GetValueOrDefault() };
            if (!pPlsvar.HasValue)
                pPlsvarParam.Value = System.DBNull.Value;

            var pBinaryvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_BINARYVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.Input, Value = pBinaryvar.GetValueOrDefault() };
            if (!pBinaryvar.HasValue)
                pBinaryvarParam.Value = System.DBNull.Value;

            var pPositivevarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_POSITIVEVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.Input, Value = pPositivevar.GetValueOrDefault() };
            if (!pPositivevar.HasValue)
                pPositivevarParam.Value = System.DBNull.Value;

            var pPositivenvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_POSITIVENVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.Input, Value = pPositivenvar.GetValueOrDefault() };
            if (!pPositivenvar.HasValue)
                pPositivenvarParam.Value = System.DBNull.Value;

            var pRealvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_REALVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.Input, Value = pRealvar.GetValueOrDefault() };
            if (!pRealvar.HasValue)
                pRealvarParam.Value = System.DBNull.Value;

            var pSigntypevarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_SIGNTYPEVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.Input, Value = pSigntypevar.GetValueOrDefault() };
            if (!pSigntypevar.HasValue)
                pSigntypevarParam.Value = System.DBNull.Value;

            var pSmallintvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_SMALLINTVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = pSmallintvar.GetValueOrDefault() };
            if (!pSmallintvar.HasValue)
                pSmallintvarParam.Value = System.DBNull.Value;

            var pBinarydoublevarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_BINARYDOUBLEVAR", OracleDbType = OracleDbType.BinaryDouble, Direction = System.Data.ParameterDirection.Input, Value = pBinarydoublevar.GetValueOrDefault() };
            if (!pBinarydoublevar.HasValue)
                pBinarydoublevarParam.Value = System.DBNull.Value;

            var pBinaryfloatvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_BINARYFLOATVAR", OracleDbType = OracleDbType.BinaryFloat, Direction = System.Data.ParameterDirection.Input, Value = pBinaryfloatvar.GetValueOrDefault() };
            if (!pBinaryfloatvar.HasValue)
                pBinaryfloatvarParam.Value = System.DBNull.Value;

            var pNumber3ColParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NUMBER3COL", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = pNumber3Col.GetValueOrDefault() };
            if (!pNumber3Col.HasValue)
                pNumber3ColParam.Value = System.DBNull.Value;

            var xDecvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_DECVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Output };
            var xDecimalvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_DECIMALVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Output };
            var xDoubleprecisionvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_DOUBLEPRECISIONVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.Output };
            var xFloatvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_FLOATVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.Output };
            var xIntvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_INTVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Output };
            var xIntegervarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_INTEGERVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Output };
            var xNaturalvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_NATURALVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.Output };
            var xNaturalnvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_NATURALNVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.Output };
            var xNumberfvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_NUMBERFVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Output };
            var xNumericvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_NUMERICVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Output };
            var xPlsvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_PLSVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.Output };
            var xBinaryvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_BINARYVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.Output };
            var xPositivevarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_POSITIVEVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.Output };
            var xPositivenvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_POSITIVENVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.Output };
            var xRealvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_REALVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.Output };
            var xSigntypevarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_SIGNTYPEVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.Output };
            var xSmallintvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_SMALLINTVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Output };
            var xBinarydoublevarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_BINARYDOUBLEVAR", OracleDbType = OracleDbType.BinaryDouble, Direction = System.Data.ParameterDirection.Output };
            var xBinaryfloatvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_BINARYFLOATVAR", OracleDbType = OracleDbType.BinaryFloat, Direction = System.Data.ParameterDirection.Output };
            var xNumber3ColParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":X_NUMBER3COL", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.Output };

            try
            {
                if (Database.Connection.State != System.Data.ConnectionState.Open)
                {
                    Database.Connection.Open();
                }

                using (var cmd = Database.Connection.CreateCommand())
                {
                    var oracleCmd = (OracleCommand)cmd;
                    oracleCmd.BindByName = true;
                    oracleCmd.InitialLOBFetchSize = -1;
                    oracleCmd.InitialLONGFetchSize = -1;
					cmd.CommandType = System.Data.CommandType.Text;
					cmd.CommandText = "begin efpoco.type_num_proc(:P_DECVAR, :P_DECIMALVAR, :P_DOUBLEPRECISIONVAR, :P_FLOATVAR, :P_INTVAR, :P_INTEGERVAR, :P_NATURALVAR, :P_NATURALNVAR, :P_NUMBERFVAR, :P_NUMERICVAR, :P_PLSVAR, :P_BINARYVAR, :P_POSITIVEVAR, :P_POSITIVENVAR, :P_REALVAR, :P_SIGNTYPEVAR, :P_SMALLINTVAR, :P_BINARYDOUBLEVAR, :P_BINARYFLOATVAR, :P_NUMBER3COL, :X_DECVAR, :X_DECIMALVAR, :X_DOUBLEPRECISIONVAR, :X_FLOATVAR, :X_INTVAR, :X_INTEGERVAR, :X_NATURALVAR, :X_NATURALNVAR, :X_NUMBERFVAR, :X_NUMERICVAR, :X_PLSVAR, :X_BINARYVAR, :X_POSITIVEVAR, :X_POSITIVENVAR, :X_REALVAR, :X_SIGNTYPEVAR, :X_SMALLINTVAR, :X_BINARYDOUBLEVAR, :X_BINARYFLOATVAR, :X_NUMBER3COL); end;";
					cmd.Parameters.AddRange(new[] {pDecvarParam, pDecimalvarParam, pDoubleprecisionvarParam, pFloatvarParam, pIntvarParam, pIntegervarParam, pNaturalvarParam, pNaturalnvarParam, pNumberfvarParam, pNumericvarParam, pPlsvarParam, pBinaryvarParam, pPositivevarParam, pPositivenvarParam, pRealvarParam, pSigntypevarParam, pSmallintvarParam, pBinarydoublevarParam, pBinaryfloatvarParam, pNumber3ColParam, xDecvarParam, xDecimalvarParam, xDoubleprecisionvarParam, xFloatvarParam, xIntvarParam, xIntegervarParam, xNaturalvarParam, xNaturalnvarParam, xNumberfvarParam, xNumericvarParam, xPlsvarParam, xBinaryvarParam, xPositivevarParam, xPositivenvarParam, xRealvarParam, xSigntypevarParam, xSmallintvarParam, xBinarydoublevarParam, xBinaryfloatvarParam, xNumber3ColParam});

					cmd.ExecuteNonQuery();

                    if (IsSqlParameterNull(xDecvarParam))
                        xDecvar = null;
                    else
                        xDecvar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xDecvarParam.Value).Value;

                    if (IsSqlParameterNull(xDecimalvarParam))
                        xDecimalvar = null;
                    else
                        xDecimalvar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xDecimalvarParam.Value).Value;

                    if (IsSqlParameterNull(xDoubleprecisionvarParam))
                        xDoubleprecisionvar = null;
                    else
                        xDoubleprecisionvar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xDoubleprecisionvarParam.Value).Value;

                    if (IsSqlParameterNull(xFloatvarParam))
                        xFloatvar = null;
                    else
                        xFloatvar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xFloatvarParam.Value).Value;

                    if (IsSqlParameterNull(xIntvarParam))
                        xIntvar = null;
                    else
                        xIntvar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xIntvarParam.Value).Value;

                    if (IsSqlParameterNull(xIntegervarParam))
                        xIntegervar = null;
                    else
                        xIntegervar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xIntegervarParam.Value).Value;

                    if (IsSqlParameterNull(xNaturalvarParam))
                        xNaturalvar = null;
                    else
                        xNaturalvar = (int) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xNaturalvarParam.Value).Value;

                    if (IsSqlParameterNull(xNaturalnvarParam))
                        xNaturalnvar = null;
                    else
                        xNaturalnvar = (int) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xNaturalnvarParam.Value).Value;

                    if (IsSqlParameterNull(xNumberfvarParam))
                        xNumberfvar = null;
                    else
                        xNumberfvar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xNumberfvarParam.Value).Value;

                    if (IsSqlParameterNull(xNumericvarParam))
                        xNumericvar = null;
                    else
                        xNumericvar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xNumericvarParam.Value).Value;

                    if (IsSqlParameterNull(xPlsvarParam))
                        xPlsvar = null;
                    else
                        xPlsvar = (int) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xPlsvarParam.Value).Value;

                    if (IsSqlParameterNull(xBinaryvarParam))
                        xBinaryvar = null;
                    else
                        xBinaryvar = (int) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xBinaryvarParam.Value).Value;

                    if (IsSqlParameterNull(xPositivevarParam))
                        xPositivevar = null;
                    else
                        xPositivevar = (int) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xPositivevarParam.Value).Value;

                    if (IsSqlParameterNull(xPositivenvarParam))
                        xPositivenvar = null;
                    else
                        xPositivenvar = (int) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xPositivenvarParam.Value).Value;

                    if (IsSqlParameterNull(xRealvarParam))
                        xRealvar = null;
                    else
                        xRealvar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xRealvarParam.Value).Value;

                    if (IsSqlParameterNull(xSigntypevarParam))
                        xSigntypevar = null;
                    else
                        xSigntypevar = (int) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xSigntypevarParam.Value).Value;

                    if (IsSqlParameterNull(xSmallintvarParam))
                        xSmallintvar = null;
                    else
                        xSmallintvar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xSmallintvarParam.Value).Value;

                    if (IsSqlParameterNull(xBinarydoublevarParam))
                        xBinarydoublevar = null;
                    else
                        xBinarydoublevar = (double) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xBinarydoublevarParam.Value).Value;

                    if (IsSqlParameterNull(xBinaryfloatvarParam))
                        xBinaryfloatvar = null;
                    else
                        xBinaryfloatvar = (float) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xBinaryfloatvarParam.Value).Value;

                    if (IsSqlParameterNull(xNumber3ColParam))
                        xNumber3Col = null;
                    else
                        xNumber3Col = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) xNumber3ColParam.Value).Value;

                }
            }
            finally
            {
                if (Database.Connection.State == System.Data.ConnectionState.Open)
                {
                    try
                    {
                        Database.Connection.Close();
                    }
                    catch
                    {
                        // ignored
                    }
                }
            }

        }

        public void TypeNumProcInout(ref decimal? pDecvar, ref decimal? pDecimalvar, ref decimal? pDoubleprecisionvar, ref decimal? pFloatvar, ref decimal? pIntvar, ref decimal? pIntegervar, ref int? pNaturalvar, ref int? pNaturalnvar, ref decimal? pNumberfvar, ref decimal? pNumericvar, ref int? pPlsvar, ref int? pBinaryvar, ref int? pPositivevar, ref int? pPositivenvar, ref decimal? pRealvar, ref int? pSigntypevar, ref decimal? pSmallintvar, ref double? pBinarydoublevar, ref float? pBinaryfloatvar)
        {
            var pDecvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_DECVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.InputOutput, Value = pDecvar.GetValueOrDefault() };
            var pDecimalvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_DECIMALVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.InputOutput, Value = pDecimalvar.GetValueOrDefault() };
            var pDoubleprecisionvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_DOUBLEPRECISIONVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.InputOutput, Value = pDoubleprecisionvar.GetValueOrDefault() };
            var pFloatvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_FLOATVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.InputOutput, Value = pFloatvar.GetValueOrDefault() };
            var pIntvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_INTVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.InputOutput, Value = pIntvar.GetValueOrDefault() };
            var pIntegervarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_INTEGERVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.InputOutput, Value = pIntegervar.GetValueOrDefault() };
            var pNaturalvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NATURALVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.InputOutput, Value = pNaturalvar.GetValueOrDefault() };
            var pNaturalnvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NATURALNVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.InputOutput, Value = pNaturalnvar.GetValueOrDefault() };
            var pNumberfvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NUMBERFVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.InputOutput, Value = pNumberfvar.GetValueOrDefault() };
            var pNumericvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_NUMERICVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.InputOutput, Value = pNumericvar.GetValueOrDefault() };
            var pPlsvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_PLSVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.InputOutput, Value = pPlsvar.GetValueOrDefault() };
            var pBinaryvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_BINARYVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.InputOutput, Value = pBinaryvar.GetValueOrDefault() };
            var pPositivevarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_POSITIVEVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.InputOutput, Value = pPositivevar.GetValueOrDefault() };
            var pPositivenvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_POSITIVENVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.InputOutput, Value = pPositivenvar.GetValueOrDefault() };
            var pRealvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_REALVAR", OracleDbType = OracleDbType.Varchar2, Direction = System.Data.ParameterDirection.InputOutput, Value = pRealvar.GetValueOrDefault() };
            var pSigntypevarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_SIGNTYPEVAR", OracleDbType = OracleDbType.Int32, Direction = System.Data.ParameterDirection.InputOutput, Value = pSigntypevar.GetValueOrDefault() };
            var pSmallintvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_SMALLINTVAR", OracleDbType = OracleDbType.Decimal, Direction = System.Data.ParameterDirection.InputOutput, Value = pSmallintvar.GetValueOrDefault() };
            var pBinarydoublevarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_BINARYDOUBLEVAR", OracleDbType = OracleDbType.BinaryDouble, Direction = System.Data.ParameterDirection.InputOutput, Value = pBinarydoublevar.GetValueOrDefault() };
            var pBinaryfloatvarParam = new Oracle.ManagedDataAccess.Client.OracleParameter { ParameterName = ":P_BINARYFLOATVAR", OracleDbType = OracleDbType.BinaryFloat, Direction = System.Data.ParameterDirection.InputOutput, Value = pBinaryfloatvar.GetValueOrDefault() };

            try
            {
                if (Database.Connection.State != System.Data.ConnectionState.Open)
                {
                    Database.Connection.Open();
                }

                using (var cmd = Database.Connection.CreateCommand())
                {
                    var oracleCmd = (OracleCommand)cmd;
                    oracleCmd.BindByName = true;
                    oracleCmd.InitialLOBFetchSize = -1;
                    oracleCmd.InitialLONGFetchSize = -1;
					cmd.CommandType = System.Data.CommandType.Text;
					cmd.CommandText = "begin efpoco.type_num_proc_inout(:P_DECVAR, :P_DECIMALVAR, :P_DOUBLEPRECISIONVAR, :P_FLOATVAR, :P_INTVAR, :P_INTEGERVAR, :P_NATURALVAR, :P_NATURALNVAR, :P_NUMBERFVAR, :P_NUMERICVAR, :P_PLSVAR, :P_BINARYVAR, :P_POSITIVEVAR, :P_POSITIVENVAR, :P_REALVAR, :P_SIGNTYPEVAR, :P_SMALLINTVAR, :P_BINARYDOUBLEVAR, :P_BINARYFLOATVAR); end;";
					cmd.Parameters.AddRange(new[] {pDecvarParam, pDecimalvarParam, pDoubleprecisionvarParam, pFloatvarParam, pIntvarParam, pIntegervarParam, pNaturalvarParam, pNaturalnvarParam, pNumberfvarParam, pNumericvarParam, pPlsvarParam, pBinaryvarParam, pPositivevarParam, pPositivenvarParam, pRealvarParam, pSigntypevarParam, pSmallintvarParam, pBinarydoublevarParam, pBinaryfloatvarParam});

					cmd.ExecuteNonQuery();

                    if (IsSqlParameterNull(pDecvarParam))
                        pDecvar = null;
                    else
                        pDecvar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pDecvarParam.Value).Value;

                    if (IsSqlParameterNull(pDecimalvarParam))
                        pDecimalvar = null;
                    else
                        pDecimalvar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pDecimalvarParam.Value).Value;

                    if (IsSqlParameterNull(pDoubleprecisionvarParam))
                        pDoubleprecisionvar = null;
                    else
                        pDoubleprecisionvar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pDoubleprecisionvarParam.Value).Value;

                    if (IsSqlParameterNull(pFloatvarParam))
                        pFloatvar = null;
                    else
                        pFloatvar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pFloatvarParam.Value).Value;

                    if (IsSqlParameterNull(pIntvarParam))
                        pIntvar = null;
                    else
                        pIntvar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pIntvarParam.Value).Value;

                    if (IsSqlParameterNull(pIntegervarParam))
                        pIntegervar = null;
                    else
                        pIntegervar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pIntegervarParam.Value).Value;

                    if (IsSqlParameterNull(pNaturalvarParam))
                        pNaturalvar = null;
                    else
                        pNaturalvar = (int) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pNaturalvarParam.Value).Value;

                    if (IsSqlParameterNull(pNaturalnvarParam))
                        pNaturalnvar = null;
                    else
                        pNaturalnvar = (int) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pNaturalnvarParam.Value).Value;

                    if (IsSqlParameterNull(pNumberfvarParam))
                        pNumberfvar = null;
                    else
                        pNumberfvar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pNumberfvarParam.Value).Value;

                    if (IsSqlParameterNull(pNumericvarParam))
                        pNumericvar = null;
                    else
                        pNumericvar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pNumericvarParam.Value).Value;

                    if (IsSqlParameterNull(pPlsvarParam))
                        pPlsvar = null;
                    else
                        pPlsvar = (int) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pPlsvarParam.Value).Value;

                    if (IsSqlParameterNull(pBinaryvarParam))
                        pBinaryvar = null;
                    else
                        pBinaryvar = (int) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pBinaryvarParam.Value).Value;

                    if (IsSqlParameterNull(pPositivevarParam))
                        pPositivevar = null;
                    else
                        pPositivevar = (int) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pPositivevarParam.Value).Value;

                    if (IsSqlParameterNull(pPositivenvarParam))
                        pPositivenvar = null;
                    else
                        pPositivenvar = (int) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pPositivenvarParam.Value).Value;

                    if (IsSqlParameterNull(pRealvarParam))
                        pRealvar = null;
                    else
                        pRealvar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pRealvarParam.Value).Value;

                    if (IsSqlParameterNull(pSigntypevarParam))
                        pSigntypevar = null;
                    else
                        pSigntypevar = (int) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pSigntypevarParam.Value).Value;

                    if (IsSqlParameterNull(pSmallintvarParam))
                        pSmallintvar = null;
                    else
                        pSmallintvar = (decimal) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pSmallintvarParam.Value).Value;

                    if (IsSqlParameterNull(pBinarydoublevarParam))
                        pBinarydoublevar = null;
                    else
                        pBinarydoublevar = (double) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pBinarydoublevarParam.Value).Value;

                    if (IsSqlParameterNull(pBinaryfloatvarParam))
                        pBinaryfloatvar = null;
                    else
                        pBinaryfloatvar = (float) ((Oracle.ManagedDataAccess.Types.OracleDecimal) pBinaryfloatvarParam.Value).Value;

                }
            }
            finally
            {
                if (Database.Connection.State == System.Data.ConnectionState.Open)
                {
                    try
                    {
                        Database.Connection.Close();
                    }
                    catch
                    {
                        // ignored
                    }
                }
            }

        }

    }
    #endregion

    #region Database context factory

    public partial class TestDatabaseDataAnnotationDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<TestDatabaseDataAnnotationDbContext>
    {
        public TestDatabaseDataAnnotationDbContext Create()
        {
            return new TestDatabaseDataAnnotationDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class FakeTestDatabaseDataAnnotationDbContext : ITestDatabaseDataAnnotationDbContext
    {
        public System.Data.Entity.DbSet<CountRy> CountRies { get; set; }
        public System.Data.Entity.DbSet<Department> Departments { get; set; }
        public System.Data.Entity.DbSet<Employee> Employees { get; set; }
        public System.Data.Entity.DbSet<Job> Jobs { get; set; }
        public System.Data.Entity.DbSet<JobHistory> JobHistories { get; set; }
        public System.Data.Entity.DbSet<Location> Locations { get; set; }
        public System.Data.Entity.DbSet<Region> Regions { get; set; }
        public System.Data.Entity.DbSet<TypeCharTable> TypeCharTables { get; set; }
        public System.Data.Entity.DbSet<TypeDateTable> TypeDateTables { get; set; }
        public System.Data.Entity.DbSet<TypeNumTable> TypeNumTables { get; set; }

        public FakeTestDatabaseDataAnnotationDbContext()
        {
            CountRies = new FakeDbSet<CountRy>("CountryId");
            Departments = new FakeDbSet<Department>("DepartmentId");
            Employees = new FakeDbSet<Employee>("EmployeeId");
            Jobs = new FakeDbSet<Job>("JobId");
            JobHistories = new FakeDbSet<JobHistory>("EmployeeId", "StartDate");
            Locations = new FakeDbSet<Location>("LocationId");
            Regions = new FakeDbSet<Region>("RegionId");
            TypeCharTables = new FakeDbSet<TypeCharTable>("Pk");
            TypeDateTables = new FakeDbSet<TypeDateTable>("Pk");
            TypeNumTables = new FakeDbSet<TypeNumTable>("Pk");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public decimal? TestFunc1()
        {

            decimal? returnValue = null;


                    returnValue = default(decimal);


            return returnValue;
        }

        public decimal? TestFunc2(decimal? pX, decimal? pY)
        {

            decimal? returnValue = null;


                    returnValue = default(decimal);


            return returnValue;
        }

        public decimal? TestFunc3(decimal? pX, decimal? pY, ref string pStr, out decimal? xZ)
        {

            decimal? returnValue = null;

            xZ = null;


                    returnValue = default(decimal);
                    pStr = default(string);
                    xZ = default(decimal);


            return returnValue;
        }

        public decimal? TestFunc4()
        {

            decimal? returnValue = null;


                    returnValue = default(decimal);


            return returnValue;
        }

        public string TestFunc5()
        {

            string returnValue = null;


                    returnValue = default(string);


            return returnValue;
        }

        public decimal? TestPkgTestFunc3(decimal? pX, decimal? pY, ref string pStr, out decimal? xZ)
        {

            decimal? returnValue = null;

            xZ = null;


                    returnValue = default(decimal);
                    pStr = default(string);
                    xZ = default(decimal);


            return returnValue;
        }

        public string TestPkgTestFunc4(int returnValueCharLength)
        {

            string returnValue = null;


                    returnValue = default(string);


            return returnValue;
        }

        public void TestPkgTestProc1(decimal? pX, decimal? pY, ref string pStr, out decimal? xZ)
        {


            xZ = null;


                    pStr = default(string);
                    xZ = default(decimal);


        }

        public void TestPkgTypeNumProc()
        {




        }

        public void TypeCharProc(string pCharcol, string pCharvaryingvar, string pCharactervar, string pCharactervaryingvar, string pNationalcharvaryvar, string pNationalcharactervaryingvar, string pNcharvar, string pNcharvaryingvar, string pNvarchar2Var, string pStringvar, string pVarcharvar, string pVarchar2Var, string pClobcol, string pNclobcol, out string xCharcol, int xCharcolCharLength, out string xCharvaryingvar, out string xCharactervar, int xCharactervarCharLength, out string xCharactervaryingvar, out string xNationalcharvaryvar, out string xNationalcharactervaryingvar, out string xNcharvar, int xNcharvarCharLength, out string xNcharvaryingvar, out string xNvarchar2Var, out string xStringvar, out string xVarcharvar, out string xVarchar2Var, out string xClobcol, out string xNclobcol)
        {


            xCharcol = null;
            xCharvaryingvar = null;
            xCharactervar = null;
            xCharactervaryingvar = null;
            xNationalcharvaryvar = null;
            xNationalcharactervaryingvar = null;
            xNcharvar = null;
            xNcharvaryingvar = null;
            xNvarchar2Var = null;
            xStringvar = null;
            xVarcharvar = null;
            xVarchar2Var = null;
            xClobcol = null;
            xNclobcol = null;


                    xCharcol = default(string);
                    xCharvaryingvar = default(string);
                    xCharactervar = default(string);
                    xCharactervaryingvar = default(string);
                    xNationalcharvaryvar = default(string);
                    xNationalcharactervaryingvar = default(string);
                    xNcharvar = default(string);
                    xNcharvaryingvar = default(string);
                    xNvarchar2Var = default(string);
                    xStringvar = default(string);
                    xVarcharvar = default(string);
                    xVarchar2Var = default(string);
                    xClobcol = default(string);
                    xNclobcol = default(string);


        }

        public void TypeCharProcInout(ref string pCharcol, int pCharcolCharLength, ref string pCharvaryingvar, ref string pCharactervar, int pCharactervarCharLength, ref string pCharactervaryingvar, ref string pNationalcharvaryvar, ref string pNationalcharactervaryingvar, ref string pNcharvar, int pNcharvarCharLength, ref string pNcharvaryingvar, ref string pNvarchar2Var, ref string pStringvar, ref string pVarcharvar, ref string pVarchar2Var, ref string pClobcol, ref string pNclobcol)
        {



                    pCharcol = default(string);
                    pCharvaryingvar = default(string);
                    pCharactervar = default(string);
                    pCharactervaryingvar = default(string);
                    pNationalcharvaryvar = default(string);
                    pNationalcharactervaryingvar = default(string);
                    pNcharvar = default(string);
                    pNcharvaryingvar = default(string);
                    pNvarchar2Var = default(string);
                    pStringvar = default(string);
                    pVarcharvar = default(string);
                    pVarchar2Var = default(string);
                    pClobcol = default(string);
                    pNclobcol = default(string);


        }

        public void TypeDateProc(System.DateTime? pDatecol, System.DateTime? pTimestampcol, System.DateTime? pDatedefaultcol, System.DateTime? pDatedefault2Col, System.DateTime? pTimestampdefaultcol, System.DateTime? pTimestampdefault2Col, System.DateTimeOffset? pTimestamptzcol, System.DateTime? pTimestampltzzcol, decimal? pIntervalyeartomonthcol, System.TimeSpan? pIntervaldaytoseccol, out System.DateTime? xDatecol, out System.DateTime? xTimestampcol, out System.DateTime? xDatedefaultcol, out System.DateTime? xDatedefault2Col, out System.DateTime? xTimestampdefaultcol, out System.DateTime? xTimestampdefault2Col, out System.DateTimeOffset? xTimestamptzcol, out System.DateTime? xTimestampltzzcol, out decimal? xIntervalyeartomonthcol, out System.TimeSpan? xIntervaldaytoseccol)
        {


            xDatecol = null;
            xTimestampcol = null;
            xDatedefaultcol = null;
            xDatedefault2Col = null;
            xTimestampdefaultcol = null;
            xTimestampdefault2Col = null;
            xTimestamptzcol = null;
            xTimestampltzzcol = null;
            xIntervalyeartomonthcol = null;
            xIntervaldaytoseccol = null;


                    xDatecol = default(System.DateTime);
                    xTimestampcol = default(System.DateTime);
                    xDatedefaultcol = default(System.DateTime);
                    xDatedefault2Col = default(System.DateTime);
                    xTimestampdefaultcol = default(System.DateTime);
                    xTimestampdefault2Col = default(System.DateTime);
                    xTimestamptzcol = default(System.DateTimeOffset);
                    xTimestampltzzcol = default(System.DateTime);
                    xIntervalyeartomonthcol = default(decimal);
                    xIntervaldaytoseccol = default(System.TimeSpan);


        }

        public void TypeDateProcInout(ref System.DateTime? pDatecol, ref System.DateTime? pTimestampcol)
        {



                    pDatecol = default(System.DateTime);
                    pTimestampcol = default(System.DateTime);


        }

        public void TypeNumProc(decimal? pDecvar, decimal? pDecimalvar, decimal? pDoubleprecisionvar, decimal? pFloatvar, decimal? pIntvar, decimal? pIntegervar, int? pNaturalvar, int? pNaturalnvar, decimal? pNumberfvar, decimal? pNumericvar, int? pPlsvar, int? pBinaryvar, int? pPositivevar, int? pPositivenvar, decimal? pRealvar, int? pSigntypevar, decimal? pSmallintvar, double? pBinarydoublevar, float? pBinaryfloatvar, decimal? pNumber3Col, out decimal? xDecvar, out decimal? xDecimalvar, out decimal? xDoubleprecisionvar, out decimal? xFloatvar, out decimal? xIntvar, out decimal? xIntegervar, out int? xNaturalvar, out int? xNaturalnvar, out decimal? xNumberfvar, out decimal? xNumericvar, out int? xPlsvar, out int? xBinaryvar, out int? xPositivevar, out int? xPositivenvar, out decimal? xRealvar, out int? xSigntypevar, out decimal? xSmallintvar, out double? xBinarydoublevar, out float? xBinaryfloatvar, out decimal? xNumber3Col)
        {


            xDecvar = null;
            xDecimalvar = null;
            xDoubleprecisionvar = null;
            xFloatvar = null;
            xIntvar = null;
            xIntegervar = null;
            xNaturalvar = null;
            xNaturalnvar = null;
            xNumberfvar = null;
            xNumericvar = null;
            xPlsvar = null;
            xBinaryvar = null;
            xPositivevar = null;
            xPositivenvar = null;
            xRealvar = null;
            xSigntypevar = null;
            xSmallintvar = null;
            xBinarydoublevar = null;
            xBinaryfloatvar = null;
            xNumber3Col = null;


                    xDecvar = default(decimal);
                    xDecimalvar = default(decimal);
                    xDoubleprecisionvar = default(decimal);
                    xFloatvar = default(decimal);
                    xIntvar = default(decimal);
                    xIntegervar = default(decimal);
                    xNaturalvar = default(int);
                    xNaturalnvar = default(int);
                    xNumberfvar = default(decimal);
                    xNumericvar = default(decimal);
                    xPlsvar = default(int);
                    xBinaryvar = default(int);
                    xPositivevar = default(int);
                    xPositivenvar = default(int);
                    xRealvar = default(decimal);
                    xSigntypevar = default(int);
                    xSmallintvar = default(decimal);
                    xBinarydoublevar = default(double);
                    xBinaryfloatvar = default(float);
                    xNumber3Col = default(decimal);


        }

        public void TypeNumProcInout(ref decimal? pDecvar, ref decimal? pDecimalvar, ref decimal? pDoubleprecisionvar, ref decimal? pFloatvar, ref decimal? pIntvar, ref decimal? pIntegervar, ref int? pNaturalvar, ref int? pNaturalnvar, ref decimal? pNumberfvar, ref decimal? pNumericvar, ref int? pPlsvar, ref int? pBinaryvar, ref int? pPositivevar, ref int? pPositivenvar, ref decimal? pRealvar, ref int? pSigntypevar, ref decimal? pSmallintvar, ref double? pBinarydoublevar, ref float? pBinaryfloatvar)
        {



                    pDecvar = default(decimal);
                    pDecimalvar = default(decimal);
                    pDoubleprecisionvar = default(decimal);
                    pFloatvar = default(decimal);
                    pIntvar = default(decimal);
                    pIntegervar = default(decimal);
                    pNaturalvar = default(int);
                    pNaturalnvar = default(int);
                    pNumberfvar = default(decimal);
                    pNumericvar = default(decimal);
                    pPlsvar = default(int);
                    pBinaryvar = default(int);
                    pPositivevar = default(int);
                    pPositivenvar = default(int);
                    pRealvar = default(decimal);
                    pSigntypevar = default(int);
                    pSmallintvar = default(decimal);
                    pBinarydoublevar = default(double);
                    pBinaryfloatvar = default(float);


        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }

        partial void InitializePartial();
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // The table 'BLAH' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // BLAH
    [NotMapped]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Blah
    {
        [Column(@"I", Order = 1, TypeName = "number")]
        [Display(Name = "I")]
        public decimal? I { get; set; } // I

        [Column(@"I2", Order = 2, TypeName = "number")]
        [Display(Name = "I 2")]
        public decimal? I2 { get; set; } // I2

        public Blah()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // COUNTRIES
    [Table("COUNTRIES", Schema = "HR")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class CountRy
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"COUNTRY_ID", Order = 1, TypeName = "char")]
        [Index(@"COUNTRY_C_ID_PK", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [MaxLength(2)]
        [StringLength(2)]
        [Key]
        [Display(Name = "Country ID")]
        public string CountryId { get; set; } // COUNTRY_ID (Primary key) (length: 2)

        [Column(@"COUNTRY_NAME", Order = 2, TypeName = "varchar2")]
        [MaxLength(40)]
        [StringLength(40)]
        [Display(Name = "Country name")]
        public string CountryName { get; set; } // COUNTRY_NAME (length: 40)

        [Column(@"REGION_ID", Order = 3, TypeName = "number")]
        [Display(Name = "Region ID")]
        public decimal? RegionId { get; set; } // REGION_ID

        // Reverse navigation

        /// <summary>
        /// Child Locations where [LOCATIONS].[COUNTRY_ID] point to this entity (LOC_C_ID_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Location> Locations { get; set; } // LOCATIONS.LOC_C_ID_FK

        // Foreign keys

        /// <summary>
        /// Parent Region pointed by [COUNTRIES].([RegionId]) (COUNTR_REG_FK)
        /// </summary>
        [ForeignKey("RegionId")] public virtual Region Region { get; set; } // COUNTR_REG_FK

        public CountRy()
        {
            Locations = new System.Collections.Generic.List<Location>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // DEPARTMENTS
    [Table("DEPARTMENTS", Schema = "HR")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Department
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"DEPARTMENT_ID", Order = 1, TypeName = "number")]
        [Index(@"DEPT_ID_PK", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Department ID")]
        public short DepartmentId { get; set; } // DEPARTMENT_ID (Primary key)

        [Column(@"DEPARTMENT_NAME", Order = 2, TypeName = "varchar2")]
        [Required]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "Department name")]
        public string DepartmentName { get; set; } // DEPARTMENT_NAME (length: 30)

        [Column(@"MANAGER_ID", Order = 3, TypeName = "number")]
        [Display(Name = "Manager ID")]
        public int? ManagerId { get; set; } // MANAGER_ID

        [Column(@"LOCATION_ID", Order = 4, TypeName = "number")]
        [Index(@"DEPT_LOCATION_IX", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Location ID")]
        public short? LocationId { get; set; } // LOCATION_ID

        // Reverse navigation

        /// <summary>
        /// Child Employees where [EMPLOYEES].[DEPARTMENT_ID] point to this entity (EMP_DEPT_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Employee> Employees { get; set; } // EMPLOYEES.EMP_DEPT_FK
        /// <summary>
        /// Child JobHistories where [JOB_HISTORY].[DEPARTMENT_ID] point to this entity (JHIST_DEPT_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<JobHistory> JobHistories { get; set; } // JOB_HISTORY.JHIST_DEPT_FK

        // Foreign keys

        /// <summary>
        /// Parent Location pointed by [DEPARTMENTS].([LocationId]) (DEPT_LOC_FK)
        /// </summary>
        [ForeignKey("LocationId")] public virtual Location Location { get; set; } // DEPT_LOC_FK

        /// <summary>
        /// Parent Employee pointed by [DEPARTMENTS].([ManagerId]) (DEPT_MGR_FK)
        /// </summary>
        [ForeignKey("ManagerId")] public virtual Employee Employee { get; set; } // DEPT_MGR_FK

        public Department()
        {
            JobHistories = new System.Collections.Generic.List<JobHistory>();
            Employees = new System.Collections.Generic.List<Employee>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // EMPLOYEES
    [Table("EMPLOYEES", Schema = "HR")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Employee
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"EMPLOYEE_ID", Order = 1, TypeName = "number")]
        [Index(@"EMP_EMP_ID_PK", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Employee ID")]
        public int EmployeeId { get; set; } // EMPLOYEE_ID (Primary key)

        [Column(@"FIRST_NAME", Order = 2, TypeName = "varchar2")]
        [Index(@"EMP_NAME_IX", 2, IsUnique = false, IsClustered = false)]
        [MaxLength(20)]
        [StringLength(20)]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FIRST_NAME (length: 20)

        [Column(@"LAST_NAME", Order = 3, TypeName = "varchar2")]
        [Index(@"EMP_NAME_IX", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [MaxLength(25)]
        [StringLength(25)]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LAST_NAME (length: 25)

        [Column(@"EMAIL", Order = 4, TypeName = "varchar2")]
        [Index(@"EMP_EMAIL_UK", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [MaxLength(25)]
        [StringLength(25)]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } // EMAIL (length: 25)

        [Column(@"PHONE_NUMBER", Order = 5, TypeName = "varchar2")]
        [MaxLength(20)]
        [StringLength(20)]
        [Phone]
        [Display(Name = "Phone number")]
        public string PhoneNumber { get; set; } // PHONE_NUMBER (length: 20)

        [Column(@"HIRE_DATE", Order = 6, TypeName = "date")]
        [Required]
        [Display(Name = "Hire date")]
        public System.DateTime HireDate { get; set; } // HIRE_DATE

        [Column(@"JOB_ID", Order = 7, TypeName = "varchar2")]
        [Index(@"EMP_JOB_IX", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Job ID")]
        public string JobId { get; set; } // JOB_ID (length: 10)

        [Column(@"SALARY", Order = 8, TypeName = "number")]
        [Display(Name = "Salary")]
        public decimal? Salary { get; set; } // SALARY

        [Column(@"COMMISSION_PCT", Order = 9, TypeName = "number")]
        [Display(Name = "Commission pct")]
        public decimal? CommissionPct { get; set; } // COMMISSION_PCT

        [Column(@"MANAGER_ID", Order = 10, TypeName = "number")]
        [Index(@"EMP_MANAGER_IX", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Manager ID")]
        public int? ManagerId { get; set; } // MANAGER_ID

        [Column(@"DEPARTMENT_ID", Order = 11, TypeName = "number")]
        [Index(@"EMP_DEPARTMENT_IX", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Department ID")]
        public short? DepartmentId { get; set; } // DEPARTMENT_ID

        // Reverse navigation

        /// <summary>
        /// Child Departments where [DEPARTMENTS].[MANAGER_ID] point to this entity (DEPT_MGR_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Department> Departments { get; set; } // DEPARTMENTS.DEPT_MGR_FK
        /// <summary>
        /// Child Employees where [EMPLOYEES].[MANAGER_ID] point to this entity (EMP_MANAGER_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Employee> Employees { get; set; } // EMPLOYEES.EMP_MANAGER_FK
        /// <summary>
        /// Child JobHistories where [JOB_HISTORY].[EMPLOYEE_ID] point to this entity (JHIST_EMP_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<JobHistory> JobHistories { get; set; } // JOB_HISTORY.JHIST_EMP_FK

        // Foreign keys

        /// <summary>
        /// Parent Department pointed by [EMPLOYEES].([DepartmentId]) (EMP_DEPT_FK)
        /// </summary>
        [ForeignKey("DepartmentId")] public virtual Department Department { get; set; } // EMP_DEPT_FK

        /// <summary>
        /// Parent Job pointed by [EMPLOYEES].([JobId]) (EMP_JOB_FK)
        /// </summary>
        [ForeignKey("JobId"), Required] public virtual Job Job { get; set; } // EMP_JOB_FK

        /// <summary>
        /// Parent Employee pointed by [EMPLOYEES].([ManagerId]) (EMP_MANAGER_FK)
        /// </summary>
        [ForeignKey("ManagerId")] public virtual Employee Manager { get; set; } // EMP_MANAGER_FK

        public Employee()
        {
            Employees = new System.Collections.Generic.List<Employee>();
            JobHistories = new System.Collections.Generic.List<JobHistory>();
            Departments = new System.Collections.Generic.List<Department>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // JOBS
    [Table("JOBS", Schema = "HR")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Job
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"JOB_ID", Order = 1, TypeName = "varchar2")]
        [Index(@"JOB_ID_PK", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Job ID")]
        public string JobId { get; set; } // JOB_ID (Primary key) (length: 10)

        [Column(@"JOB_TITLE", Order = 2, TypeName = "varchar2")]
        [Required]
        [MaxLength(35)]
        [StringLength(35)]
        [Display(Name = "Job title")]
        public string JobTitle { get; set; } // JOB_TITLE (length: 35)

        [Column(@"MIN_SALARY", Order = 3, TypeName = "number")]
        [Display(Name = "Min salary")]
        public int? MinSalary { get; set; } // MIN_SALARY

        [Column(@"MAX_SALARY", Order = 4, TypeName = "number")]
        [Display(Name = "Max salary")]
        public int? MaxSalary { get; set; } // MAX_SALARY

        // Reverse navigation

        /// <summary>
        /// Child Employees where [EMPLOYEES].[JOB_ID] point to this entity (EMP_JOB_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Employee> Employees { get; set; } // EMPLOYEES.EMP_JOB_FK
        /// <summary>
        /// Child JobHistories where [JOB_HISTORY].[JOB_ID] point to this entity (JHIST_JOB_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<JobHistory> JobHistories { get; set; } // JOB_HISTORY.JHIST_JOB_FK

        public Job()
        {
            Employees = new System.Collections.Generic.List<Employee>();
            JobHistories = new System.Collections.Generic.List<JobHistory>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // JOB_HISTORY
    [Table("JOB_HISTORY", Schema = "HR")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class JobHistory
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"EMPLOYEE_ID", Order = 1, TypeName = "number")]
        [Index(@"JHIST_EMPLOYEE_IX", 1, IsUnique = false, IsClustered = false)]
        [Index(@"JHIST_EMP_ID_ST_DATE_PK", 1, IsUnique = true, IsClustered = false)]
        [Index(@"JHIST_EMP_ID_ST_DATE_PK", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Employee ID")]
        public int EmployeeId { get; set; } // EMPLOYEE_ID (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"START_DATE", Order = 2, TypeName = "date")]
        [Index(@"JHIST_EMP_ID_ST_DATE_PK", 2, IsUnique = true, IsClustered = false)]
        [Index(@"JHIST_EMP_ID_ST_DATE_PK", 2, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Start date")]
        public System.DateTime StartDate { get; set; } // START_DATE (Primary key)

        [Column(@"END_DATE", Order = 3, TypeName = "date")]
        [Required]
        [Display(Name = "End date")]
        public System.DateTime EndDate { get; set; } // END_DATE

        [Column(@"JOB_ID", Order = 4, TypeName = "varchar2")]
        [Index(@"JHIST_JOB_IX", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Job ID")]
        public string JobId { get; set; } // JOB_ID (length: 10)

        [Column(@"DEPARTMENT_ID", Order = 5, TypeName = "number")]
        [Index(@"JHIST_DEPARTMENT_IX", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Department ID")]
        public short? DepartmentId { get; set; } // DEPARTMENT_ID

        // Foreign keys

        /// <summary>
        /// Parent Department pointed by [JOB_HISTORY].([DepartmentId]) (JHIST_DEPT_FK)
        /// </summary>
        [ForeignKey("DepartmentId")] public virtual Department Department { get; set; } // JHIST_DEPT_FK

        /// <summary>
        /// Parent Employee pointed by [JOB_HISTORY].([EmployeeId]) (JHIST_EMP_FK)
        /// </summary>
        [ForeignKey("EmployeeId"), Required] public virtual Employee Employee { get; set; } // JHIST_EMP_FK

        /// <summary>
        /// Parent Job pointed by [JOB_HISTORY].([JobId]) (JHIST_JOB_FK)
        /// </summary>
        [ForeignKey("JobId"), Required] public virtual Job Job { get; set; } // JHIST_JOB_FK

        public JobHistory()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // LOCATIONS
    [Table("LOCATIONS", Schema = "HR")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Location
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"LOCATION_ID", Order = 1, TypeName = "number")]
        [Index(@"LOC_ID_PK", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Location ID")]
        public short LocationId { get; set; } // LOCATION_ID (Primary key)

        [Column(@"STREET_ADDRESS", Order = 2, TypeName = "varchar2")]
        [MaxLength(40)]
        [StringLength(40)]
        [Display(Name = "Street address")]
        public string StreetAddress { get; set; } // STREET_ADDRESS (length: 40)

        [Column(@"POSTAL_CODE", Order = 3, TypeName = "varchar2")]
        [MaxLength(12)]
        [StringLength(12)]
        [Display(Name = "Postal code")]
        public string PostalCode { get; set; } // POSTAL_CODE (length: 12)

        [Column(@"CITY", Order = 4, TypeName = "varchar2")]
        [Index(@"LOC_CITY_IX", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "City")]
        public string City { get; set; } // CITY (length: 30)

        [Column(@"STATE_PROVINCE", Order = 5, TypeName = "varchar2")]
        [Index(@"LOC_STATE_PROVINCE_IX", 1, IsUnique = false, IsClustered = false)]
        [MaxLength(25)]
        [StringLength(25)]
        [Display(Name = "State province")]
        public string StateProvince { get; set; } // STATE_PROVINCE (length: 25)

        [Column(@"COUNTRY_ID", Order = 6, TypeName = "char")]
        [Index(@"LOC_COUNTRY_IX", 1, IsUnique = false, IsClustered = false)]
        [MaxLength(2)]
        [StringLength(2)]
        [Display(Name = "Country ID")]
        public string CountryId { get; set; } // COUNTRY_ID (length: 2)

        // Reverse navigation

        /// <summary>
        /// Child Departments where [DEPARTMENTS].[LOCATION_ID] point to this entity (DEPT_LOC_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Department> Departments { get; set; } // DEPARTMENTS.DEPT_LOC_FK

        // Foreign keys

        /// <summary>
        /// Parent CountRy pointed by [LOCATIONS].([CountryId]) (LOC_C_ID_FK)
        /// </summary>
        [ForeignKey("CountryId")] public virtual CountRy CountRy { get; set; } // LOC_C_ID_FK

        public Location()
        {
            Departments = new System.Collections.Generic.List<Department>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // The table 'NL_CLOBS' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // NL_CLOBS
    [NotMapped]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class NlClob
    {
        [Column(@"C_CLOB", Order = 1, TypeName = "clob")]
        [Display(Name = "C clob")]
        public string CClob { get; set; } // C_CLOB

        [Column(@"N_CLOB", Order = 2, TypeName = "nclob")]
        [Display(Name = "N clob")]
        public string NClob { get; set; } // N_CLOB

        public NlClob()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // The table 'NL_DATES' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // NL_DATES
    [NotMapped]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class NlDate
    {
        [Column(@"T_TZ", Order = 1, TypeName = "timestamp with time zone")]
        [Display(Name = "T tz")]
        public System.DateTimeOffset? TTz { get; set; } // T_TZ

        public NlDate()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // The table 'NL_INTERVALS' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // NL_INTERVALS
    [NotMapped]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class NlInterval
    {
        [Column(@"I1", Order = 1, TypeName = "interval year to month")]
        [Display(Name = "I 1")]
        public decimal? I1 { get; set; } // I1

        [Column(@"I2", Order = 2, TypeName = "interval day to second")]
        [Display(Name = "I 2")]
        public System.TimeSpan? I2 { get; set; } // I2

        public NlInterval()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // REGIONS
    [Table("REGIONS", Schema = "HR")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Region
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"REGION_ID", Order = 1, TypeName = "number")]
        [Index(@"REG_ID_PK", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Region ID")]
        public decimal RegionId { get; set; } // REGION_ID (Primary key)

        [Column(@"REGION_NAME", Order = 2, TypeName = "varchar2")]
        [MaxLength(25)]
        [StringLength(25)]
        [Display(Name = "Region name")]
        public string RegionName { get; set; } // REGION_NAME (length: 25)

        // Reverse navigation

        /// <summary>
        /// Child CountRies where [COUNTRIES].[REGION_ID] point to this entity (COUNTR_REG_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CountRy> CountRies { get; set; } // COUNTRIES.COUNTR_REG_FK

        public Region()
        {
            CountRies = new System.Collections.Generic.List<CountRy>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // TYPE_CHAR_TABLE
    [Table("TYPE_CHAR_TABLE", Schema = "EFPOCO")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TypeCharTable
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PK", Order = 1, TypeName = "number")]
        [Index(@"SYS_C0026062", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Pk")]
        public long Pk { get; set; } // PK (Primary key)

        [Column(@"CHARCOL", Order = 2, TypeName = "char")]
        [MaxLength(2000)]
        [StringLength(2000)]
        [Display(Name = "Charcol")]
        public string Charcol { get; set; } // CHARCOL (length: 2000)

        [Column(@"CHARVARYINGCOL", Order = 3, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Charvaryingcol")]
        public string Charvaryingcol { get; set; } // CHARVARYINGCOL (length: 4000)

        [Column(@"CHARACTERCOL", Order = 4, TypeName = "char")]
        [MaxLength(2000)]
        [StringLength(2000)]
        [Display(Name = "Charactercol")]
        public string Charactercol { get; set; } // CHARACTERCOL (length: 2000)

        [Column(@"CHARACTERVARYINGCOL", Order = 5, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Charactervaryingcol")]
        public string Charactervaryingcol { get; set; } // CHARACTERVARYINGCOL (length: 4000)

        [Column(@"NATIONALCHARVARYING", Order = 6, TypeName = "nvarchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Nationalcharvarying")]
        public string Nationalcharvarying { get; set; } // NATIONALCHARVARYING (length: 4000)

        [Column(@"NATIONALCHARACTERVARYINGCOL", Order = 7, TypeName = "nvarchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Nationalcharactervaryingcol")]
        public string Nationalcharactervaryingcol { get; set; } // NATIONALCHARACTERVARYINGCOL (length: 4000)

        [Column(@"NCHARCOL", Order = 8, TypeName = "nchar")]
        [MaxLength(2000)]
        [StringLength(2000)]
        [Display(Name = "Ncharcol")]
        public string Ncharcol { get; set; } // NCHARCOL (length: 2000)

        [Column(@"NCHARVARYINGCOL", Order = 9, TypeName = "nvarchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Ncharvaryingcol")]
        public string Ncharvaryingcol { get; set; } // NCHARVARYINGCOL (length: 4000)

        [Column(@"NVARCHAR2COL", Order = 10, TypeName = "nvarchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Nvarchar 2 col")]
        public string Nvarchar2Col { get; set; } // NVARCHAR2COL (length: 4000)

        [Column(@"VARCHARCOL", Order = 11, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Varcharcol")]
        public string Varcharcol { get; set; } // VARCHARCOL (length: 4000)

        [Column(@"VARCHAR2COL", Order = 12, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Varchar 2 col")]
        public string Varchar2Col { get; set; } // VARCHAR2COL (length: 4000)

        [Column(@"VARCHAR2DEFAULTCOL", Order = 13, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Varchar 2 defaultcol")]
        public string Varchar2Defaultcol { get; set; } // VARCHAR2DEFAULTCOL (length: 4000)

        [Column(@"VARCHAR2DEFAULT2COL", Order = 14, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Varchar 2 default 2 col")]
        public string Varchar2Default2Col { get; set; } // VARCHAR2DEFAULT2COL (length: 4000)

        [Column(@"VARCHAR2DEFAULT3COL", Order = 15, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Varchar 2 default 3 col")]
        public string Varchar2Default3Col { get; set; } // VARCHAR2DEFAULT3COL (length: 4000)

        [Column(@"VARCHAR2DEFAULT4COL", Order = 16, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Varchar 2 default 4 col")]
        public string Varchar2Default4Col { get; set; } // VARCHAR2DEFAULT4COL (length: 4000)

        [Column(@"VARCHAR2DEFAULT5COL", Order = 17, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Varchar 2 default 5 col")]
        public string Varchar2Default5Col { get; set; } // VARCHAR2DEFAULT5COL (length: 4000)

        [Column(@"VARCHAR2DEFAULT6COL", Order = 18, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Varchar 2 default 6 col")]
        public string Varchar2Default6Col { get; set; } // VARCHAR2DEFAULT6COL (length: 4000)

        [Column(@"CLOBCOL", Order = 20, TypeName = "clob")]
        [Display(Name = "Clobcol")]
        public string Clobcol { get; set; } // CLOBCOL

        [Column(@"CLOBDEFAULTCOL", Order = 21, TypeName = "clob")]
        [Display(Name = "Clobdefaultcol")]
        public string Clobdefaultcol { get; set; } // CLOBDEFAULTCOL

        [Column(@"NCLOBCOL", Order = 22, TypeName = "nclob")]
        [Display(Name = "Nclobcol")]
        public string Nclobcol { get; set; } // NCLOBCOL

        public TypeCharTable()
        {
            Varchar2Defaultcol = "default_value_for_varchar2";
            Varchar2Default2Col = "default_value_for_varchar2";
            Varchar2Default6Col = "'should_be_wrapped_in_single_quotes' - \"more text in double quotes\" - yet more text";
            Clobdefaultcol = "default_value_for_clob";
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // TYPE_DATE_TABLE
    [Table("TYPE_DATE_TABLE", Schema = "EFPOCO")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TypeDateTable
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PK", Order = 1, TypeName = "number")]
        [Index(@"SYS_C0026065", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Pk")]
        public long Pk { get; set; } // PK (Primary key)

        [Column(@"DATECOL", Order = 2, TypeName = "date")]
        [Display(Name = "Datecol")]
        public System.DateTime? Datecol { get; set; } // DATECOL

        [Column(@"DATEDEFAULTCOL", Order = 3, TypeName = "date")]
        [Display(Name = "Datedefaultcol")]
        public System.DateTime? Datedefaultcol { get; set; } // DATEDEFAULTCOL

        [Column(@"DATEDEFAULT2COL", Order = 4, TypeName = "date")]
        [Display(Name = "Datedefault 2 col")]
        public System.DateTime? Datedefault2Col { get; set; } // DATEDEFAULT2COL

        [Column(@"TIMESTAMPCOL", Order = 5, TypeName = "timestamp")]
        [Display(Name = "Timestampcol")]
        public System.DateTime? Timestampcol { get; set; } // TIMESTAMPCOL

        [Column(@"TIMESTAMPDEFAULTCOL", Order = 6, TypeName = "timestamp")]
        [Display(Name = "Timestampdefaultcol")]
        public System.DateTime? Timestampdefaultcol { get; set; } // TIMESTAMPDEFAULTCOL

        [Column(@"TIMESTAMPDEFAULT2COL", Order = 7, TypeName = "timestamp")]
        [Display(Name = "Timestampdefault 2 col")]
        public System.DateTime? Timestampdefault2Col { get; set; } // TIMESTAMPDEFAULT2COL

        [Column(@"TIMESTAMPCOL2", Order = 8, TypeName = "timestamp")]
        [Display(Name = "Timestampcol 2")]
        public System.DateTime? Timestampcol2 { get; set; } // TIMESTAMPCOL2

        [Column(@"TIMESTAMPCOL3", Order = 9, TypeName = "timestamp")]
        [Display(Name = "Timestampcol 3")]
        public System.DateTime? Timestampcol3 { get; set; } // TIMESTAMPCOL3

        [Column(@"TIMESTAMPTZCOL", Order = 10, TypeName = "timestamp with time zone")]
        [Display(Name = "Timestamptzcol")]
        public System.DateTimeOffset? Timestamptzcol { get; set; } // TIMESTAMPTZCOL

        [Column(@"TIMESTAMPTZCOL2", Order = 11, TypeName = "timestamp with time zone")]
        [Display(Name = "Timestamptzcol 2")]
        public System.DateTimeOffset? Timestamptzcol2 { get; set; } // TIMESTAMPTZCOL2

        [Column(@"TIMESTAMPTZCOL3", Order = 12, TypeName = "timestamp with time zone")]
        [Display(Name = "Timestamptzcol 3")]
        public System.DateTimeOffset? Timestamptzcol3 { get; set; } // TIMESTAMPTZCOL3

        [Column(@"TIMESTAMPLTZZCOL", Order = 13, TypeName = "timestamp with local time zone")]
        [Display(Name = "Timestampltzzcol")]
        public System.DateTime? Timestampltzzcol { get; set; } // TIMESTAMPLTZZCOL

        [Column(@"TIMESTAMPLTZCOL2", Order = 14, TypeName = "timestamp with local time zone")]
        [Display(Name = "Timestampltzcol 2")]
        public System.DateTime? Timestampltzcol2 { get; set; } // TIMESTAMPLTZCOL2

        [Column(@"TIMESTAMPLTZCOL3", Order = 15, TypeName = "timestamp with local time zone")]
        [Display(Name = "Timestampltzcol 3")]
        public System.DateTime? Timestampltzcol3 { get; set; } // TIMESTAMPLTZCOL3

        [Column(@"INTERVALYEARTOMONTHCOL", Order = 16, TypeName = "interval year to month")]
        [Display(Name = "Intervalyeartomonthcol")]
        public decimal? Intervalyeartomonthcol { get; set; } // INTERVALYEARTOMONTHCOL

        [Column(@"INTERVALYEARTOMONTHCOL2", Order = 17, TypeName = "interval year to month")]
        [Display(Name = "Intervalyeartomonthcol 2")]
        public decimal? Intervalyeartomonthcol2 { get; set; } // INTERVALYEARTOMONTHCOL2

        [Column(@"INTERVALYEARTOMONTHCOL3", Order = 18, TypeName = "interval year to month")]
        [Display(Name = "Intervalyeartomonthcol 3")]
        public decimal? Intervalyeartomonthcol3 { get; set; } // INTERVALYEARTOMONTHCOL3

        [Column(@"INTERVALDAYTOSECCOL", Order = 19, TypeName = "interval day to second")]
        [Display(Name = "Intervaldaytoseccol")]
        public System.TimeSpan? Intervaldaytoseccol { get; set; } // INTERVALDAYTOSECCOL

        [Column(@"INTERVALDAYTOSECCOL2", Order = 20, TypeName = "interval day to second")]
        [Display(Name = "Intervaldaytoseccol 2")]
        public System.TimeSpan? Intervaldaytoseccol2 { get; set; } // INTERVALDAYTOSECCOL2

        [Column(@"INTERVALDAYTOSECCOL3", Order = 21, TypeName = "interval day to second")]
        [Display(Name = "Intervaldaytoseccol 3")]
        public System.TimeSpan? Intervaldaytoseccol3 { get; set; } // INTERVALDAYTOSECCOL3

        public TypeDateTable()
        {
            Datedefaultcol = System.DateTime.Now;
            Timestampdefaultcol = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // TYPE_NUM_TABLE
    [Table("TYPE_NUM_TABLE", Schema = "EFPOCO")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TypeNumTable
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PK", Order = 1, TypeName = "number")]
        [Index(@"SYS_C0026068", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Pk")]
        public long Pk { get; set; } // PK (Primary key)

        [Column(@"DECCOL", Order = 2, TypeName = "number")]
        [Display(Name = "Deccol")]
        public decimal? Deccol { get; set; } // DECCOL

        [Column(@"DECCOL2", Order = 3, TypeName = "number")]
        [Display(Name = "Deccol 2")]
        public decimal? Deccol2 { get; set; } // DECCOL2

        [Column(@"DECDEFAULTCOL", Order = 4, TypeName = "number")]
        [Display(Name = "Decdefaultcol")]
        public decimal? Decdefaultcol { get; set; } // DECDEFAULTCOL

        [Column(@"DECDEFAULT2COL", Order = 5, TypeName = "number")]
        [Display(Name = "Decdefault 2 col")]
        public decimal? Decdefault2Col { get; set; } // DECDEFAULT2COL

        [Column(@"DECDEFAULT3COL", Order = 6, TypeName = "number")]
        [Display(Name = "Decdefault 3 col")]
        public decimal? Decdefault3Col { get; set; } // DECDEFAULT3COL

        [Column(@"DECIMALCOL", Order = 7, TypeName = "number")]
        [Display(Name = "Decimalcol")]
        public decimal? Decimalcol { get; set; } // DECIMALCOL

        [Column(@"DECIMALCOL2", Order = 8, TypeName = "number")]
        [Display(Name = "Decimalcol 2")]
        public decimal? Decimalcol2 { get; set; } // DECIMALCOL2

        [Column(@"DOUBLEPRECISIONCOL", Order = 9, TypeName = "float")]
        [Display(Name = "Doubleprecisioncol")]
        public decimal? Doubleprecisioncol { get; set; } // DOUBLEPRECISIONCOL

        [Column(@"DOUBLEPRECISIONDEFAULTCOL", Order = 10, TypeName = "float")]
        [Display(Name = "Doubleprecisiondefaultcol")]
        public decimal? Doubleprecisiondefaultcol { get; set; } // DOUBLEPRECISIONDEFAULTCOL

        [Column(@"FLOATCOL", Order = 11, TypeName = "float")]
        [Display(Name = "Floatcol")]
        public decimal? Floatcol { get; set; } // FLOATCOL

        [Column(@"BINARYFLOATCOL", Order = 12, TypeName = "binary_float")]
        [Display(Name = "Binaryfloatcol")]
        public float? Binaryfloatcol { get; set; } // BINARYFLOATCOL

        [Column(@"BINARYFLOATDEFAULTCOL", Order = 13, TypeName = "binary_float")]
        [Display(Name = "Binaryfloatdefaultcol")]
        public float? Binaryfloatdefaultcol { get; set; } // BINARYFLOATDEFAULTCOL

        [Column(@"BINARYDOUBLECOL", Order = 14, TypeName = "binary_double")]
        [Display(Name = "Binarydoublecol")]
        public double? Binarydoublecol { get; set; } // BINARYDOUBLECOL

        [Column(@"BINARYDOUBLEDEFAULTCOL", Order = 15, TypeName = "binary_double")]
        [Display(Name = "Binarydoubledefaultcol")]
        public double? Binarydoubledefaultcol { get; set; } // BINARYDOUBLEDEFAULTCOL

        [Column(@"INTCOL", Order = 16, TypeName = "number")]
        [Display(Name = "Intcol")]
        public decimal? Intcol { get; set; } // INTCOL

        [Column(@"INTEGERCOL", Order = 17, TypeName = "number")]
        [Display(Name = "Integercol")]
        public decimal? Integercol { get; set; } // INTEGERCOL

        [Column(@"NUMBERCOL", Order = 18, TypeName = "number")]
        [Display(Name = "Numbercol")]
        public decimal? Numbercol { get; set; } // NUMBERCOL

        [Column(@"NUMBERDEFAULTCOL", Order = 19, TypeName = "number")]
        [Display(Name = "Numberdefaultcol")]
        public decimal? Numberdefaultcol { get; set; } // NUMBERDEFAULTCOL

        [Column(@"NUMBERDEFAULT2COL", Order = 20, TypeName = "number")]
        [Display(Name = "Numberdefault 2 col")]
        public decimal? Numberdefault2Col { get; set; } // NUMBERDEFAULT2COL

        [Column(@"NUMBERDEFAULT3COL", Order = 21, TypeName = "number")]
        [Display(Name = "Numberdefault 3 col")]
        public decimal? Numberdefault3Col { get; set; } // NUMBERDEFAULT3COL

        [Column(@"NUMBERFCOL", Order = 22, TypeName = "number")]
        [Display(Name = "Numberfcol")]
        public decimal? Numberfcol { get; set; } // NUMBERFCOL

        [Column(@"NUMERICCOL", Order = 23, TypeName = "number")]
        [Display(Name = "Numericcol")]
        public decimal? Numericcol { get; set; } // NUMERICCOL

        [Column(@"NUMERICFCOL", Order = 24, TypeName = "number")]
        [Display(Name = "Numericfcol")]
        public decimal? Numericfcol { get; set; } // NUMERICFCOL

        [Column(@"REALCOL", Order = 25, TypeName = "float")]
        [Display(Name = "Realcol")]
        public decimal? Realcol { get; set; } // REALCOL

        [Column(@"SMALLINTCOL", Order = 26, TypeName = "number")]
        [Display(Name = "Smallintcol")]
        public decimal? Smallintcol { get; set; } // SMALLINTCOL

        [Column(@"NUMBER1COL", Order = 27, TypeName = "number")]
        [Display(Name = "Number 1 col")]
        public short? Number1Col { get; set; } // NUMBER1COL

        [Column(@"NUMBER1COL2", Order = 28, TypeName = "number")]
        [Display(Name = "Number 1 col 2")]
        public short? Number1Col2 { get; set; } // NUMBER1COL2

        [Column(@"NUMBER2COL", Order = 29, TypeName = "number")]
        [Display(Name = "Number 2 col")]
        public short? Number2Col { get; set; } // NUMBER2COL

        [Column(@"NUMBER3COL", Order = 30, TypeName = "number")]
        [Display(Name = "Number 3 col")]
        public short? Number3Col { get; set; } // NUMBER3COL

        [Column(@"NUMBER4COL", Order = 31, TypeName = "number")]
        [Display(Name = "Number 4 col")]
        public short? Number4Col { get; set; } // NUMBER4COL

        [Column(@"NUMBER4COL2", Order = 32, TypeName = "number")]
        [Display(Name = "Number 4 col 2")]
        public short? Number4Col2 { get; set; } // NUMBER4COL2

        [Column(@"NUMBER5COL", Order = 33, TypeName = "number")]
        [Display(Name = "Number 5 col")]
        public int? Number5Col { get; set; } // NUMBER5COL

        [Column(@"NUMBER5COL2", Order = 34, TypeName = "number")]
        [Display(Name = "Number 5 col 2")]
        public int? Number5Col2 { get; set; } // NUMBER5COL2

        [Column(@"NUMBER6COL", Order = 35, TypeName = "number")]
        [Display(Name = "Number 6 col")]
        public int? Number6Col { get; set; } // NUMBER6COL

        [Column(@"NUMBER7COL", Order = 36, TypeName = "number")]
        [Display(Name = "Number 7 col")]
        public int? Number7Col { get; set; } // NUMBER7COL

        [Column(@"NUMBER8COL", Order = 37, TypeName = "number")]
        [Display(Name = "Number 8 col")]
        public int? Number8Col { get; set; } // NUMBER8COL

        [Column(@"NUMBER9COL", Order = 38, TypeName = "number")]
        [Display(Name = "Number 9 col")]
        public int? Number9Col { get; set; } // NUMBER9COL

        [Column(@"NUMBER10COL", Order = 39, TypeName = "number")]
        [Display(Name = "Number 10 col")]
        public long? Number10Col { get; set; } // NUMBER10COL

        [Column(@"NUMBER10COL2", Order = 40, TypeName = "number")]
        [Display(Name = "Number 10 col 2")]
        public long? Number10Col2 { get; set; } // NUMBER10COL2

        [Column(@"NUMBER11COL", Order = 41, TypeName = "number")]
        [Display(Name = "Number 11 col")]
        public long? Number11Col { get; set; } // NUMBER11COL

        [Column(@"NUMBER11COL2", Order = 42, TypeName = "number")]
        [Display(Name = "Number 11 col 2")]
        public long? Number11Col2 { get; set; } // NUMBER11COL2

        [Column(@"NUMBER12COL", Order = 43, TypeName = "number")]
        [Display(Name = "Number 12 col")]
        public long? Number12Col { get; set; } // NUMBER12COL

        [Column(@"NUMBER13COL", Order = 44, TypeName = "number")]
        [Display(Name = "Number 13 col")]
        public long? Number13Col { get; set; } // NUMBER13COL

        [Column(@"NUMBER14COL", Order = 45, TypeName = "number")]
        [Display(Name = "Number 14 col")]
        public long? Number14Col { get; set; } // NUMBER14COL

        [Column(@"NUMBER15COL", Order = 46, TypeName = "number")]
        [Display(Name = "Number 15 col")]
        public long? Number15Col { get; set; } // NUMBER15COL

        [Column(@"NUMBER16COL", Order = 47, TypeName = "number")]
        [Display(Name = "Number 16 col")]
        public long? Number16Col { get; set; } // NUMBER16COL

        [Column(@"NUMBER17COL", Order = 48, TypeName = "number")]
        [Display(Name = "Number 17 col")]
        public long? Number17Col { get; set; } // NUMBER17COL

        [Column(@"NUMBER18COL", Order = 49, TypeName = "number")]
        [Display(Name = "Number 18 col")]
        public long? Number18Col { get; set; } // NUMBER18COL

        [Column(@"NUMBER19COL", Order = 50, TypeName = "number")]
        [Display(Name = "Number 19 col")]
        public long? Number19Col { get; set; } // NUMBER19COL

        [Column(@"NUMBER19COL2", Order = 51, TypeName = "number")]
        [Display(Name = "Number 19 col 2")]
        public long? Number19Col2 { get; set; } // NUMBER19COL2

        [Column(@"NUMBER20COL", Order = 52, TypeName = "number")]
        [Display(Name = "Number 20 col")]
        public decimal? Number20Col { get; set; } // NUMBER20COL

        [Column(@"NUMBER20COL2", Order = 53, TypeName = "number")]
        [Display(Name = "Number 20 col 2")]
        public decimal? Number20Col2 { get; set; } // NUMBER20COL2

        [Column(@"NUMBER21COL", Order = 54, TypeName = "number")]
        [Display(Name = "Number 21 col")]
        public decimal? Number21Col { get; set; } // NUMBER21COL

        [Column(@"NUMBER22COL", Order = 55, TypeName = "number")]
        [Display(Name = "Number 22 col")]
        public decimal? Number22Col { get; set; } // NUMBER22COL

        [Column(@"NUMBER23COL", Order = 56, TypeName = "number")]
        [Display(Name = "Number 23 col")]
        public decimal? Number23Col { get; set; } // NUMBER23COL

        [Column(@"NUMBER24COL", Order = 57, TypeName = "number")]
        [Display(Name = "Number 24 col")]
        public decimal? Number24Col { get; set; } // NUMBER24COL

        [Column(@"NUMBER25COL", Order = 58, TypeName = "number")]
        [Display(Name = "Number 25 col")]
        public decimal? Number25Col { get; set; } // NUMBER25COL

        public TypeNumTable()
        {
            Decdefaultcol = 10.0m;
            Decdefault2Col = 10.0m;
            Decdefault3Col = 10.0m;
            Doubleprecisiondefaultcol = 3.0m;
            Binaryfloatdefaultcol = 1.0f;
            Binarydoubledefaultcol = 2.0d;
            Numberdefaultcol = 1m;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    #endregion

    #region POCO Configuration

    // COUNTRIES
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class CountRyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CountRy>
    {
        public CountRyConfiguration()
            : this("HR")
        {
        }

        public CountRyConfiguration(string schema)
        {
            Property(x => x.CountryId).IsFixedLength().IsUnicode(false);
            Property(x => x.CountryName).IsOptional().IsUnicode(false);
            Property(x => x.RegionId).IsOptional();

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // DEPARTMENTS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class DepartmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Department>
    {
        public DepartmentConfiguration()
            : this("HR")
        {
        }

        public DepartmentConfiguration(string schema)
        {
            Property(x => x.DepartmentName).IsUnicode(false);
            Property(x => x.ManagerId).IsOptional();
            Property(x => x.LocationId).IsOptional();

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // EMPLOYEES
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class EmployeeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Employee>
    {
        public EmployeeConfiguration()
            : this("HR")
        {
        }

        public EmployeeConfiguration(string schema)
        {
            Property(x => x.FirstName).IsOptional().IsUnicode(false);
            Property(x => x.LastName).IsUnicode(false);
            Property(x => x.Email).IsUnicode(false);
            Property(x => x.PhoneNumber).IsOptional().IsUnicode(false);
            Property(x => x.JobId).IsUnicode(false);
            Property(x => x.Salary).IsOptional().HasPrecision(8,2);
            Property(x => x.CommissionPct).IsOptional().HasPrecision(2,2);
            Property(x => x.ManagerId).IsOptional();
            Property(x => x.DepartmentId).IsOptional();

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // JOBS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class JobConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Job>
    {
        public JobConfiguration()
            : this("HR")
        {
        }

        public JobConfiguration(string schema)
        {
            Property(x => x.JobId).IsUnicode(false);
            Property(x => x.JobTitle).IsUnicode(false);
            Property(x => x.MinSalary).IsOptional();
            Property(x => x.MaxSalary).IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // JOB_HISTORY
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class JobHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<JobHistory>
    {
        public JobHistoryConfiguration()
            : this("HR")
        {
        }

        public JobHistoryConfiguration(string schema)
        {
            Property(x => x.JobId).IsUnicode(false);
            Property(x => x.DepartmentId).IsOptional();

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // LOCATIONS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class LocationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Location>
    {
        public LocationConfiguration()
            : this("HR")
        {
        }

        public LocationConfiguration(string schema)
        {
            Property(x => x.StreetAddress).IsOptional().IsUnicode(false);
            Property(x => x.PostalCode).IsOptional().IsUnicode(false);
            Property(x => x.City).IsUnicode(false);
            Property(x => x.StateProvince).IsOptional().IsUnicode(false);
            Property(x => x.CountryId).IsOptional().IsFixedLength().IsUnicode(false);

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // REGIONS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class RegionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Region>
    {
        public RegionConfiguration()
            : this("HR")
        {
        }

        public RegionConfiguration(string schema)
        {
            Property(x => x.RegionName).IsOptional().IsUnicode(false);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // TYPE_CHAR_TABLE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TypeCharTableConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TypeCharTable>
    {
        public TypeCharTableConfiguration()
            : this("EFPOCO")
        {
        }

        public TypeCharTableConfiguration(string schema)
        {
            Property(x => x.Charcol).IsOptional().IsFixedLength().IsUnicode(false);
            Property(x => x.Charvaryingcol).IsOptional().IsUnicode(false);
            Property(x => x.Charactercol).IsOptional().IsFixedLength().IsUnicode(false);
            Property(x => x.Charactervaryingcol).IsOptional().IsUnicode(false);
            Property(x => x.Nationalcharvarying).IsOptional();
            Property(x => x.Nationalcharactervaryingcol).IsOptional();
            Property(x => x.Ncharcol).IsOptional().IsFixedLength();
            Property(x => x.Ncharvaryingcol).IsOptional();
            Property(x => x.Nvarchar2Col).IsOptional();
            Property(x => x.Varcharcol).IsOptional().IsUnicode(false);
            Property(x => x.Varchar2Col).IsOptional().IsUnicode(false);
            Property(x => x.Varchar2Defaultcol).IsOptional().IsUnicode(false);
            Property(x => x.Varchar2Default2Col).IsOptional().IsUnicode(false);
            Property(x => x.Varchar2Default3Col).IsOptional().IsUnicode(false);
            Property(x => x.Varchar2Default4Col).IsOptional().IsUnicode(false);
            Property(x => x.Varchar2Default5Col).IsOptional().IsUnicode(false);
            Property(x => x.Varchar2Default6Col).IsOptional().IsUnicode(false);
            Property(x => x.Clobcol).IsOptional();
            Property(x => x.Clobdefaultcol).IsOptional();
            Property(x => x.Nclobcol).IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // TYPE_DATE_TABLE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TypeDateTableConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TypeDateTable>
    {
        public TypeDateTableConfiguration()
            : this("EFPOCO")
        {
        }

        public TypeDateTableConfiguration(string schema)
        {
            Property(x => x.Datecol).IsOptional();
            Property(x => x.Datedefaultcol).IsOptional();
            Property(x => x.Datedefault2Col).IsOptional();
            Property(x => x.Timestampcol).IsOptional();
            Property(x => x.Timestampdefaultcol).IsOptional();
            Property(x => x.Timestampdefault2Col).IsOptional();
            Property(x => x.Timestampcol2).IsOptional();
            Property(x => x.Timestampcol3).IsOptional();
            Property(x => x.Timestamptzcol).IsOptional();
            Property(x => x.Timestamptzcol2).IsOptional();
            Property(x => x.Timestamptzcol3).IsOptional();
            Property(x => x.Timestampltzzcol).IsOptional();
            Property(x => x.Timestampltzcol2).IsOptional();
            Property(x => x.Timestampltzcol3).IsOptional();
            Property(x => x.Intervalyeartomonthcol).IsOptional().HasPrecision(2,0);
            Property(x => x.Intervalyeartomonthcol2).IsOptional();
            Property(x => x.Intervalyeartomonthcol3).IsOptional().HasPrecision(9,0);
            Property(x => x.Intervaldaytoseccol).IsOptional();
            Property(x => x.Intervaldaytoseccol2).IsOptional();
            Property(x => x.Intervaldaytoseccol3).IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // TYPE_NUM_TABLE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TypeNumTableConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TypeNumTable>
    {
        public TypeNumTableConfiguration()
            : this("EFPOCO")
        {
        }

        public TypeNumTableConfiguration(string schema)
        {
            Property(x => x.Deccol).IsOptional().HasPrecision(38,0);
            Property(x => x.Deccol2).IsOptional().HasPrecision(38,10);
            Property(x => x.Decdefaultcol).IsOptional().HasPrecision(38,10);
            Property(x => x.Decdefault2Col).IsOptional().HasPrecision(38,10);
            Property(x => x.Decdefault3Col).IsOptional().HasPrecision(38,10);
            Property(x => x.Decimalcol).IsOptional().HasPrecision(38,0);
            Property(x => x.Decimalcol2).IsOptional().HasPrecision(38,10);
            Property(x => x.Doubleprecisioncol).IsOptional().HasPrecision(126,0);
            Property(x => x.Doubleprecisiondefaultcol).IsOptional().HasPrecision(126,0);
            Property(x => x.Floatcol).IsOptional().HasPrecision(126,0);
            Property(x => x.Binaryfloatcol).IsOptional();
            Property(x => x.Binaryfloatdefaultcol).IsOptional();
            Property(x => x.Binarydoublecol).IsOptional();
            Property(x => x.Binarydoubledefaultcol).IsOptional();
            Property(x => x.Intcol).IsOptional();
            Property(x => x.Integercol).IsOptional();
            Property(x => x.Numbercol).IsOptional().HasPrecision(38,0);
            Property(x => x.Numberdefaultcol).IsOptional().HasPrecision(38,0);
            Property(x => x.Numberdefault2Col).IsOptional().HasPrecision(38,0);
            Property(x => x.Numberdefault3Col).IsOptional().HasPrecision(38,0);
            Property(x => x.Numberfcol).IsOptional();
            Property(x => x.Numericcol).IsOptional().HasPrecision(38,0);
            Property(x => x.Numericfcol).IsOptional();
            Property(x => x.Realcol).IsOptional().HasPrecision(63,0);
            Property(x => x.Smallintcol).IsOptional();
            Property(x => x.Number1Col).IsOptional();
            Property(x => x.Number1Col2).IsOptional();
            Property(x => x.Number2Col).IsOptional();
            Property(x => x.Number3Col).IsOptional();
            Property(x => x.Number4Col).IsOptional();
            Property(x => x.Number4Col2).IsOptional();
            Property(x => x.Number5Col).IsOptional();
            Property(x => x.Number5Col2).IsOptional();
            Property(x => x.Number6Col).IsOptional();
            Property(x => x.Number7Col).IsOptional();
            Property(x => x.Number8Col).IsOptional();
            Property(x => x.Number9Col).IsOptional();
            Property(x => x.Number10Col).IsOptional();
            Property(x => x.Number10Col2).IsOptional();
            Property(x => x.Number11Col).IsOptional();
            Property(x => x.Number11Col2).IsOptional();
            Property(x => x.Number12Col).IsOptional();
            Property(x => x.Number13Col).IsOptional();
            Property(x => x.Number14Col).IsOptional();
            Property(x => x.Number15Col).IsOptional();
            Property(x => x.Number16Col).IsOptional();
            Property(x => x.Number17Col).IsOptional();
            Property(x => x.Number18Col).IsOptional();
            Property(x => x.Number19Col).IsOptional();
            Property(x => x.Number19Col2).IsOptional();
            Property(x => x.Number20Col).IsOptional().HasPrecision(20,0);
            Property(x => x.Number20Col2).IsOptional().HasPrecision(20,0);
            Property(x => x.Number21Col).IsOptional().HasPrecision(21,0);
            Property(x => x.Number22Col).IsOptional().HasPrecision(22,0);
            Property(x => x.Number23Col).IsOptional().HasPrecision(23,0);
            Property(x => x.Number24Col).IsOptional().HasPrecision(24,0);
            Property(x => x.Number25Col).IsOptional().HasPrecision(25,0);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    #endregion

    #region Stored procedure return models

    #endregion

}
// </auto-generated>

