

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Tester\App.config"
//     Connection String Name: "MyDbContext"
//     Connection String:      "Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=win81)(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=XE)));User Id=efpoco;password=**zapped**;"
// ------------------------------------------------------------------------------------------------
// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace TestDatabaseDataAnnotation
{
    using System.Linq;

    #region Unit of work

    public partial interface ITestDatabaseDataAnnotationDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<CountRy> CountRies { get; set; } // COUNTRIES
        System.Data.Entity.DbSet<Department> Departments { get; set; } // DEPARTMENTS
        System.Data.Entity.DbSet<Employee> Employees { get; set; } // EMPLOYEES
        System.Data.Entity.DbSet<Job> Jobs { get; set; } // JOBS
        System.Data.Entity.DbSet<JobHistory> JobHistories { get; set; } // JOB_HISTORY
        System.Data.Entity.DbSet<Location> Locations { get; set; } // LOCATIONS
        System.Data.Entity.DbSet<Region> Regions { get; set; } // REGIONS
        System.Data.Entity.DbSet<TypeCharTable> TypeCharTables { get; set; } // TYPE_CHAR_TABLE
        System.Data.Entity.DbSet<TypeDateTable> TypeDateTables { get; set; } // TYPE_DATE_TABLE
        System.Data.Entity.DbSet<TypeNumTable> TypeNumTables { get; set; } // TYPE_NUM_TABLE

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TestDatabaseDataAnnotationDbContext : System.Data.Entity.DbContext, ITestDatabaseDataAnnotationDbContext
    {
        public System.Data.Entity.DbSet<CountRy> CountRies { get; set; } // COUNTRIES
        public System.Data.Entity.DbSet<Department> Departments { get; set; } // DEPARTMENTS
        public System.Data.Entity.DbSet<Employee> Employees { get; set; } // EMPLOYEES
        public System.Data.Entity.DbSet<Job> Jobs { get; set; } // JOBS
        public System.Data.Entity.DbSet<JobHistory> JobHistories { get; set; } // JOB_HISTORY
        public System.Data.Entity.DbSet<Location> Locations { get; set; } // LOCATIONS
        public System.Data.Entity.DbSet<Region> Regions { get; set; } // REGIONS
        public System.Data.Entity.DbSet<TypeCharTable> TypeCharTables { get; set; } // TYPE_CHAR_TABLE
        public System.Data.Entity.DbSet<TypeDateTable> TypeDateTables { get; set; } // TYPE_DATE_TABLE
        public System.Data.Entity.DbSet<TypeNumTable> TypeNumTables { get; set; } // TYPE_NUM_TABLE

        static TestDatabaseDataAnnotationDbContext()
        {
            System.Data.Entity.Database.SetInitializer<TestDatabaseDataAnnotationDbContext>(null);
        }

        public TestDatabaseDataAnnotationDbContext()
            : base("Name=MyDbContext")
        {
            InitializePartial();
        }

        public TestDatabaseDataAnnotationDbContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public TestDatabaseDataAnnotationDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public TestDatabaseDataAnnotationDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public TestDatabaseDataAnnotationDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            DisposePartial(disposing);
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new CountRyConfiguration());
            modelBuilder.Configurations.Add(new DepartmentConfiguration());
            modelBuilder.Configurations.Add(new EmployeeConfiguration());
            modelBuilder.Configurations.Add(new JobConfiguration());
            modelBuilder.Configurations.Add(new JobHistoryConfiguration());
            modelBuilder.Configurations.Add(new LocationConfiguration());
            modelBuilder.Configurations.Add(new RegionConfiguration());
            modelBuilder.Configurations.Add(new TypeCharTableConfiguration());
            modelBuilder.Configurations.Add(new TypeDateTableConfiguration());
            modelBuilder.Configurations.Add(new TypeNumTableConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new CountRyConfiguration(schema));
            modelBuilder.Configurations.Add(new DepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new EmployeeConfiguration(schema));
            modelBuilder.Configurations.Add(new JobConfiguration(schema));
            modelBuilder.Configurations.Add(new JobHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new LocationConfiguration(schema));
            modelBuilder.Configurations.Add(new RegionConfiguration(schema));
            modelBuilder.Configurations.Add(new TypeCharTableConfiguration(schema));
            modelBuilder.Configurations.Add(new TypeDateTableConfiguration(schema));
            modelBuilder.Configurations.Add(new TypeNumTableConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void DisposePartial(bool disposing);
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);
    }
    #endregion

    #region Database context factory

    public partial class TestDatabaseDataAnnotationDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<TestDatabaseDataAnnotationDbContext>
    {
        public TestDatabaseDataAnnotationDbContext Create()
        {
            return new TestDatabaseDataAnnotationDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class FakeTestDatabaseDataAnnotationDbContext : ITestDatabaseDataAnnotationDbContext
    {
        public System.Data.Entity.DbSet<CountRy> CountRies { get; set; }
        public System.Data.Entity.DbSet<Department> Departments { get; set; }
        public System.Data.Entity.DbSet<Employee> Employees { get; set; }
        public System.Data.Entity.DbSet<Job> Jobs { get; set; }
        public System.Data.Entity.DbSet<JobHistory> JobHistories { get; set; }
        public System.Data.Entity.DbSet<Location> Locations { get; set; }
        public System.Data.Entity.DbSet<Region> Regions { get; set; }
        public System.Data.Entity.DbSet<TypeCharTable> TypeCharTables { get; set; }
        public System.Data.Entity.DbSet<TypeDateTable> TypeDateTables { get; set; }
        public System.Data.Entity.DbSet<TypeNumTable> TypeNumTables { get; set; }

        public FakeTestDatabaseDataAnnotationDbContext()
        {
            CountRies = new FakeDbSet<CountRy>("CountryId");
            Departments = new FakeDbSet<Department>("DepartmentId");
            Employees = new FakeDbSet<Employee>("EmployeeId");
            Jobs = new FakeDbSet<Job>("JobId");
            JobHistories = new FakeDbSet<JobHistory>("EmployeeId", "StartDate");
            Locations = new FakeDbSet<Location>("LocationId");
            Regions = new FakeDbSet<Region>("RegionId");
            TypeCharTables = new FakeDbSet<TypeCharTable>("Pk");
            TypeDateTables = new FakeDbSet<TypeDateTable>("Pk");
            TypeNumTables = new FakeDbSet<TypeNumTable>("Pk");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }

        partial void InitializePartial();
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // COUNTRIES
    [Table("COUNTRIES", Schema = "HR")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class CountRy
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"COUNTRY_ID", Order = 1, TypeName = "char")]
        [Index(@"COUNTRY_C_ID_PK", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [MaxLength(2)]
        [StringLength(2)]
        [Key]
        [Display(Name = "Country ID")]
        public string CountryId { get; set; } // COUNTRY_ID (Primary key) (length: 2)

        [Column(@"COUNTRY_NAME", Order = 2, TypeName = "varchar2")]
        [MaxLength(40)]
        [StringLength(40)]
        [Display(Name = "Country name")]
        public string CountryName { get; set; } // COUNTRY_NAME (length: 40)

        [Column(@"REGION_ID", Order = 3, TypeName = "number")]
        [Display(Name = "Region ID")]
        public decimal? RegionId { get; set; } // REGION_ID

        // Reverse navigation

        /// <summary>
        /// Child Locations where [LOCATIONS].[COUNTRY_ID] point to this entity (LOC_C_ID_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Location> Locations { get; set; } // LOCATIONS.LOC_C_ID_FK

        // Foreign keys

        /// <summary>
        /// Parent Region pointed by [COUNTRIES].([RegionId]) (COUNTR_REG_FK)
        /// </summary>
        [ForeignKey("RegionId")] public virtual Region Region { get; set; } // COUNTR_REG_FK

        public CountRy()
        {
            Locations = new System.Collections.Generic.List<Location>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // DEPARTMENTS
    [Table("DEPARTMENTS", Schema = "HR")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Department
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"DEPARTMENT_ID", Order = 1, TypeName = "number")]
        [Index(@"DEPT_ID_PK", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Department ID")]
        public short DepartmentId { get; set; } // DEPARTMENT_ID (Primary key)

        [Column(@"DEPARTMENT_NAME", Order = 2, TypeName = "varchar2")]
        [Required]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "Department name")]
        public string DepartmentName { get; set; } // DEPARTMENT_NAME (length: 30)

        [Column(@"MANAGER_ID", Order = 3, TypeName = "number")]
        [Display(Name = "Manager ID")]
        public int? ManagerId { get; set; } // MANAGER_ID

        [Column(@"LOCATION_ID", Order = 4, TypeName = "number")]
        [Index(@"DEPT_LOCATION_IX", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Location ID")]
        public short? LocationId { get; set; } // LOCATION_ID

        // Reverse navigation

        /// <summary>
        /// Child Employees where [EMPLOYEES].[DEPARTMENT_ID] point to this entity (EMP_DEPT_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Employee> Employees { get; set; } // EMPLOYEES.EMP_DEPT_FK
        /// <summary>
        /// Child JobHistories where [JOB_HISTORY].[DEPARTMENT_ID] point to this entity (JHIST_DEPT_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<JobHistory> JobHistories { get; set; } // JOB_HISTORY.JHIST_DEPT_FK

        // Foreign keys

        /// <summary>
        /// Parent Location pointed by [DEPARTMENTS].([LocationId]) (DEPT_LOC_FK)
        /// </summary>
        [ForeignKey("LocationId")] public virtual Location Location { get; set; } // DEPT_LOC_FK

        /// <summary>
        /// Parent Employee pointed by [DEPARTMENTS].([ManagerId]) (DEPT_MGR_FK)
        /// </summary>
        [ForeignKey("ManagerId")] public virtual Employee Employee { get; set; } // DEPT_MGR_FK

        public Department()
        {
            JobHistories = new System.Collections.Generic.List<JobHistory>();
            Employees = new System.Collections.Generic.List<Employee>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // EMPLOYEES
    [Table("EMPLOYEES", Schema = "HR")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Employee
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"EMPLOYEE_ID", Order = 1, TypeName = "number")]
        [Index(@"EMP_EMP_ID_PK", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Employee ID")]
        public int EmployeeId { get; set; } // EMPLOYEE_ID (Primary key)

        [Column(@"FIRST_NAME", Order = 2, TypeName = "varchar2")]
        [Index(@"EMP_NAME_IX", 2, IsUnique = false, IsClustered = false)]
        [MaxLength(20)]
        [StringLength(20)]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FIRST_NAME (length: 20)

        [Column(@"LAST_NAME", Order = 3, TypeName = "varchar2")]
        [Index(@"EMP_NAME_IX", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [MaxLength(25)]
        [StringLength(25)]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LAST_NAME (length: 25)

        [Column(@"EMAIL", Order = 4, TypeName = "varchar2")]
        [Index(@"EMP_EMAIL_UK", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [MaxLength(25)]
        [StringLength(25)]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } // EMAIL (length: 25)

        [Column(@"PHONE_NUMBER", Order = 5, TypeName = "varchar2")]
        [MaxLength(20)]
        [StringLength(20)]
        [Phone]
        [Display(Name = "Phone number")]
        public string PhoneNumber { get; set; } // PHONE_NUMBER (length: 20)

        [Column(@"HIRE_DATE", Order = 6, TypeName = "date")]
        [Required]
        [Display(Name = "Hire date")]
        public System.DateTime HireDate { get; set; } // HIRE_DATE

        [Column(@"JOB_ID", Order = 7, TypeName = "varchar2")]
        [Index(@"EMP_JOB_IX", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Job ID")]
        public string JobId { get; set; } // JOB_ID (length: 10)

        [Column(@"SALARY", Order = 8, TypeName = "number")]
        [Display(Name = "Salary")]
        public decimal? Salary { get; set; } // SALARY

        [Column(@"COMMISSION_PCT", Order = 9, TypeName = "number")]
        [Display(Name = "Commission pct")]
        public decimal? CommissionPct { get; set; } // COMMISSION_PCT

        [Column(@"MANAGER_ID", Order = 10, TypeName = "number")]
        [Index(@"EMP_MANAGER_IX", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Manager ID")]
        public int? ManagerId { get; set; } // MANAGER_ID

        [Column(@"DEPARTMENT_ID", Order = 11, TypeName = "number")]
        [Index(@"EMP_DEPARTMENT_IX", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Department ID")]
        public short? DepartmentId { get; set; } // DEPARTMENT_ID

        // Reverse navigation

        /// <summary>
        /// Child Departments where [DEPARTMENTS].[MANAGER_ID] point to this entity (DEPT_MGR_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Department> Departments { get; set; } // DEPARTMENTS.DEPT_MGR_FK
        /// <summary>
        /// Child Employees where [EMPLOYEES].[MANAGER_ID] point to this entity (EMP_MANAGER_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Employee> Employees { get; set; } // EMPLOYEES.EMP_MANAGER_FK
        /// <summary>
        /// Child JobHistories where [JOB_HISTORY].[EMPLOYEE_ID] point to this entity (JHIST_EMP_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<JobHistory> JobHistories { get; set; } // JOB_HISTORY.JHIST_EMP_FK

        // Foreign keys

        /// <summary>
        /// Parent Department pointed by [EMPLOYEES].([DepartmentId]) (EMP_DEPT_FK)
        /// </summary>
        [ForeignKey("DepartmentId")] public virtual Department Department { get; set; } // EMP_DEPT_FK

        /// <summary>
        /// Parent Job pointed by [EMPLOYEES].([JobId]) (EMP_JOB_FK)
        /// </summary>
        [ForeignKey("JobId"), Required] public virtual Job Job { get; set; } // EMP_JOB_FK

        /// <summary>
        /// Parent Employee pointed by [EMPLOYEES].([ManagerId]) (EMP_MANAGER_FK)
        /// </summary>
        [ForeignKey("ManagerId")] public virtual Employee Manager { get; set; } // EMP_MANAGER_FK

        public Employee()
        {
            Employees = new System.Collections.Generic.List<Employee>();
            JobHistories = new System.Collections.Generic.List<JobHistory>();
            Departments = new System.Collections.Generic.List<Department>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // JOBS
    [Table("JOBS", Schema = "HR")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Job
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"JOB_ID", Order = 1, TypeName = "varchar2")]
        [Index(@"JOB_ID_PK", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Job ID")]
        public string JobId { get; set; } // JOB_ID (Primary key) (length: 10)

        [Column(@"JOB_TITLE", Order = 2, TypeName = "varchar2")]
        [Required]
        [MaxLength(35)]
        [StringLength(35)]
        [Display(Name = "Job title")]
        public string JobTitle { get; set; } // JOB_TITLE (length: 35)

        [Column(@"MIN_SALARY", Order = 3, TypeName = "number")]
        [Display(Name = "Min salary")]
        public int? MinSalary { get; set; } // MIN_SALARY

        [Column(@"MAX_SALARY", Order = 4, TypeName = "number")]
        [Display(Name = "Max salary")]
        public int? MaxSalary { get; set; } // MAX_SALARY

        // Reverse navigation

        /// <summary>
        /// Child Employees where [EMPLOYEES].[JOB_ID] point to this entity (EMP_JOB_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Employee> Employees { get; set; } // EMPLOYEES.EMP_JOB_FK
        /// <summary>
        /// Child JobHistories where [JOB_HISTORY].[JOB_ID] point to this entity (JHIST_JOB_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<JobHistory> JobHistories { get; set; } // JOB_HISTORY.JHIST_JOB_FK

        public Job()
        {
            Employees = new System.Collections.Generic.List<Employee>();
            JobHistories = new System.Collections.Generic.List<JobHistory>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // JOB_HISTORY
    [Table("JOB_HISTORY", Schema = "HR")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class JobHistory
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"EMPLOYEE_ID", Order = 1, TypeName = "number")]
        [Index(@"JHIST_EMPLOYEE_IX", 1, IsUnique = false, IsClustered = false)]
        [Index(@"JHIST_EMP_ID_ST_DATE_PK", 1, IsUnique = true, IsClustered = false)]
        [Index(@"JHIST_EMP_ID_ST_DATE_PK", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Employee ID")]
        public int EmployeeId { get; set; } // EMPLOYEE_ID (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"START_DATE", Order = 2, TypeName = "date")]
        [Index(@"JHIST_EMP_ID_ST_DATE_PK", 2, IsUnique = true, IsClustered = false)]
        [Index(@"JHIST_EMP_ID_ST_DATE_PK", 2, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Start date")]
        public System.DateTime StartDate { get; set; } // START_DATE (Primary key)

        [Column(@"END_DATE", Order = 3, TypeName = "date")]
        [Required]
        [Display(Name = "End date")]
        public System.DateTime EndDate { get; set; } // END_DATE

        [Column(@"JOB_ID", Order = 4, TypeName = "varchar2")]
        [Index(@"JHIST_JOB_IX", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Job ID")]
        public string JobId { get; set; } // JOB_ID (length: 10)

        [Column(@"DEPARTMENT_ID", Order = 5, TypeName = "number")]
        [Index(@"JHIST_DEPARTMENT_IX", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Department ID")]
        public short? DepartmentId { get; set; } // DEPARTMENT_ID

        // Foreign keys

        /// <summary>
        /// Parent Department pointed by [JOB_HISTORY].([DepartmentId]) (JHIST_DEPT_FK)
        /// </summary>
        [ForeignKey("DepartmentId")] public virtual Department Department { get; set; } // JHIST_DEPT_FK

        /// <summary>
        /// Parent Employee pointed by [JOB_HISTORY].([EmployeeId]) (JHIST_EMP_FK)
        /// </summary>
        [ForeignKey("EmployeeId"), Required] public virtual Employee Employee { get; set; } // JHIST_EMP_FK

        /// <summary>
        /// Parent Job pointed by [JOB_HISTORY].([JobId]) (JHIST_JOB_FK)
        /// </summary>
        [ForeignKey("JobId"), Required] public virtual Job Job { get; set; } // JHIST_JOB_FK

        public JobHistory()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // LOCATIONS
    [Table("LOCATIONS", Schema = "HR")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Location
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"LOCATION_ID", Order = 1, TypeName = "number")]
        [Index(@"LOC_ID_PK", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Location ID")]
        public short LocationId { get; set; } // LOCATION_ID (Primary key)

        [Column(@"STREET_ADDRESS", Order = 2, TypeName = "varchar2")]
        [MaxLength(40)]
        [StringLength(40)]
        [Display(Name = "Street address")]
        public string StreetAddress { get; set; } // STREET_ADDRESS (length: 40)

        [Column(@"POSTAL_CODE", Order = 3, TypeName = "varchar2")]
        [MaxLength(12)]
        [StringLength(12)]
        [Display(Name = "Postal code")]
        public string PostalCode { get; set; } // POSTAL_CODE (length: 12)

        [Column(@"CITY", Order = 4, TypeName = "varchar2")]
        [Index(@"LOC_CITY_IX", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "City")]
        public string City { get; set; } // CITY (length: 30)

        [Column(@"STATE_PROVINCE", Order = 5, TypeName = "varchar2")]
        [Index(@"LOC_STATE_PROVINCE_IX", 1, IsUnique = false, IsClustered = false)]
        [MaxLength(25)]
        [StringLength(25)]
        [Display(Name = "State province")]
        public string StateProvince { get; set; } // STATE_PROVINCE (length: 25)

        [Column(@"COUNTRY_ID", Order = 6, TypeName = "char")]
        [Index(@"LOC_COUNTRY_IX", 1, IsUnique = false, IsClustered = false)]
        [MaxLength(2)]
        [StringLength(2)]
        [Display(Name = "Country ID")]
        public string CountryId { get; set; } // COUNTRY_ID (length: 2)

        // Reverse navigation

        /// <summary>
        /// Child Departments where [DEPARTMENTS].[LOCATION_ID] point to this entity (DEPT_LOC_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Department> Departments { get; set; } // DEPARTMENTS.DEPT_LOC_FK

        // Foreign keys

        /// <summary>
        /// Parent CountRy pointed by [LOCATIONS].([CountryId]) (LOC_C_ID_FK)
        /// </summary>
        [ForeignKey("CountryId")] public virtual CountRy CountRy { get; set; } // LOC_C_ID_FK

        public Location()
        {
            Departments = new System.Collections.Generic.List<Department>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // REGIONS
    [Table("REGIONS", Schema = "HR")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Region
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"REGION_ID", Order = 1, TypeName = "number")]
        [Index(@"REG_ID_PK", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Region ID")]
        public decimal RegionId { get; set; } // REGION_ID (Primary key)

        [Column(@"REGION_NAME", Order = 2, TypeName = "varchar2")]
        [MaxLength(25)]
        [StringLength(25)]
        [Display(Name = "Region name")]
        public string RegionName { get; set; } // REGION_NAME (length: 25)

        // Reverse navigation

        /// <summary>
        /// Child CountRies where [COUNTRIES].[REGION_ID] point to this entity (COUNTR_REG_FK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CountRy> CountRies { get; set; } // COUNTRIES.COUNTR_REG_FK

        public Region()
        {
            CountRies = new System.Collections.Generic.List<CountRy>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // TYPE_CHAR_TABLE
    [Table("TYPE_CHAR_TABLE", Schema = "EFPOCO")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TypeCharTable
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PK", Order = 1, TypeName = "number")]
        [Index(@"SYS_C0026062", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Pk")]
        public long Pk { get; set; } // PK (Primary key)

        [Column(@"CHARCOL", Order = 2, TypeName = "char")]
        [MaxLength(2000)]
        [StringLength(2000)]
        [Display(Name = "Charcol")]
        public string Charcol { get; set; } // CHARCOL (length: 2000)

        [Column(@"CHARVARYINGCOL", Order = 3, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Charvaryingcol")]
        public string Charvaryingcol { get; set; } // CHARVARYINGCOL (length: 4000)

        [Column(@"CHARACTERCOL", Order = 4, TypeName = "char")]
        [MaxLength(2000)]
        [StringLength(2000)]
        [Display(Name = "Charactercol")]
        public string Charactercol { get; set; } // CHARACTERCOL (length: 2000)

        [Column(@"CHARACTERVARYINGCOL", Order = 5, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Charactervaryingcol")]
        public string Charactervaryingcol { get; set; } // CHARACTERVARYINGCOL (length: 4000)

        [Column(@"NATIONALCHARVARYING", Order = 6, TypeName = "nvarchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Nationalcharvarying")]
        public string Nationalcharvarying { get; set; } // NATIONALCHARVARYING (length: 4000)

        [Column(@"NATIONALCHARACTERVARYINGCOL", Order = 7, TypeName = "nvarchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Nationalcharactervaryingcol")]
        public string Nationalcharactervaryingcol { get; set; } // NATIONALCHARACTERVARYINGCOL (length: 4000)

        [Column(@"NCHARCOL", Order = 8, TypeName = "nchar")]
        [MaxLength(2000)]
        [StringLength(2000)]
        [Display(Name = "Ncharcol")]
        public string Ncharcol { get; set; } // NCHARCOL (length: 2000)

        [Column(@"NCHARVARYINGCOL", Order = 9, TypeName = "nvarchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Ncharvaryingcol")]
        public string Ncharvaryingcol { get; set; } // NCHARVARYINGCOL (length: 4000)

        [Column(@"NVARCHAR2COL", Order = 10, TypeName = "nvarchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Nvarchar 2 col")]
        public string Nvarchar2Col { get; set; } // NVARCHAR2COL (length: 4000)

        [Column(@"VARCHARCOL", Order = 11, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Varcharcol")]
        public string Varcharcol { get; set; } // VARCHARCOL (length: 4000)

        [Column(@"VARCHAR2COL", Order = 12, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Varchar 2 col")]
        public string Varchar2Col { get; set; } // VARCHAR2COL (length: 4000)

        [Column(@"VARCHAR2DEFAULTCOL", Order = 13, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Varchar 2 defaultcol")]
        public string Varchar2Defaultcol { get; set; } // VARCHAR2DEFAULTCOL (length: 4000)

        [Column(@"VARCHAR2DEFAULT2COL", Order = 14, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Varchar 2 default 2 col")]
        public string Varchar2Default2Col { get; set; } // VARCHAR2DEFAULT2COL (length: 4000)

        [Column(@"VARCHAR2DEFAULT3COL", Order = 15, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Varchar 2 default 3 col")]
        public string Varchar2Default3Col { get; set; } // VARCHAR2DEFAULT3COL (length: 4000)

        [Column(@"VARCHAR2DEFAULT4COL", Order = 16, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Varchar 2 default 4 col")]
        public string Varchar2Default4Col { get; set; } // VARCHAR2DEFAULT4COL (length: 4000)

        [Column(@"VARCHAR2DEFAULT5COL", Order = 17, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Varchar 2 default 5 col")]
        public string Varchar2Default5Col { get; set; } // VARCHAR2DEFAULT5COL (length: 4000)

        [Column(@"VARCHAR2DEFAULT6COL", Order = 18, TypeName = "varchar2")]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Varchar 2 default 6 col")]
        public string Varchar2Default6Col { get; set; } // VARCHAR2DEFAULT6COL (length: 4000)

        [Column(@"CLOBCOL", Order = 20, TypeName = "clob")]
        [Display(Name = "Clobcol")]
        public string Clobcol { get; set; } // CLOBCOL

        [Column(@"CLOBDEFAULTCOL", Order = 21, TypeName = "clob")]
        [Display(Name = "Clobdefaultcol")]
        public string Clobdefaultcol { get; set; } // CLOBDEFAULTCOL

        [Column(@"NCLOBCOL", Order = 22, TypeName = "nclob")]
        [Display(Name = "Nclobcol")]
        public string Nclobcol { get; set; } // NCLOBCOL

        public TypeCharTable()
        {
            Varchar2Defaultcol = "default_value_for_varchar2";
            Varchar2Default2Col = "default_value_for_varchar2";
            Varchar2Default6Col = "'should_be_wrapped_in_single_quotes' - \"more text in double quotes\" - yet more text";
            Clobdefaultcol = "default_value_for_clob";
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // TYPE_DATE_TABLE
    [Table("TYPE_DATE_TABLE", Schema = "EFPOCO")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TypeDateTable
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PK", Order = 1, TypeName = "number")]
        [Index(@"SYS_C0026050", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Pk")]
        public long Pk { get; set; } // PK (Primary key)

        [Column(@"DATECOL", Order = 2, TypeName = "date")]
        [Display(Name = "Datecol")]
        public System.DateTime? Datecol { get; set; } // DATECOL

        [Column(@"DATEDEFAULTCOL", Order = 3, TypeName = "date")]
        [Display(Name = "Datedefaultcol")]
        public System.DateTime? Datedefaultcol { get; set; } // DATEDEFAULTCOL

        [Column(@"DATEDEFAULT2COL", Order = 4, TypeName = "date")]
        [Display(Name = "Datedefault 2 col")]
        public System.DateTime? Datedefault2Col { get; set; } // DATEDEFAULT2COL

        [Column(@"TIMESTAMPCOL", Order = 5, TypeName = "timestamp")]
        [Display(Name = "Timestampcol")]
        public System.DateTime? Timestampcol { get; set; } // TIMESTAMPCOL

        [Column(@"TIMESTAMPDEFAULTCOL", Order = 6, TypeName = "timestamp")]
        [Display(Name = "Timestampdefaultcol")]
        public System.DateTime? Timestampdefaultcol { get; set; } // TIMESTAMPDEFAULTCOL

        [Column(@"TIMESTAMPDEFAULT2COL", Order = 7, TypeName = "timestamp")]
        [Display(Name = "Timestampdefault 2 col")]
        public System.DateTime? Timestampdefault2Col { get; set; } // TIMESTAMPDEFAULT2COL

        [Column(@"TIMESTAMPCOL2", Order = 8, TypeName = "timestamp")]
        [Display(Name = "Timestampcol 2")]
        public System.DateTime? Timestampcol2 { get; set; } // TIMESTAMPCOL2

        [Column(@"TIMESTAMPCOL3", Order = 9, TypeName = "timestamp")]
        [Display(Name = "Timestampcol 3")]
        public System.DateTime? Timestampcol3 { get; set; } // TIMESTAMPCOL3

        [Column(@"TIMESTAMPTZCOL", Order = 10, TypeName = "timestamp with time zone")]
        [Display(Name = "Timestamptzcol")]
        public System.DateTimeOffset? Timestamptzcol { get; set; } // TIMESTAMPTZCOL

        [Column(@"TIMESTAMPTZCOL2", Order = 11, TypeName = "timestamp with time zone")]
        [Display(Name = "Timestamptzcol 2")]
        public System.DateTimeOffset? Timestamptzcol2 { get; set; } // TIMESTAMPTZCOL2

        [Column(@"TIMESTAMPTZCOL3", Order = 12, TypeName = "timestamp with time zone")]
        [Display(Name = "Timestamptzcol 3")]
        public System.DateTimeOffset? Timestamptzcol3 { get; set; } // TIMESTAMPTZCOL3

        [Column(@"TIMESTAMPLTZZCOL", Order = 13, TypeName = "timestamp with local time zone")]
        [Display(Name = "Timestampltzzcol")]
        public System.DateTime? Timestampltzzcol { get; set; } // TIMESTAMPLTZZCOL

        [Column(@"TIMESTAMPLTZCOL2", Order = 14, TypeName = "timestamp with local time zone")]
        [Display(Name = "Timestampltzcol 2")]
        public System.DateTime? Timestampltzcol2 { get; set; } // TIMESTAMPLTZCOL2

        [Column(@"TIMESTAMPLTZCOL3", Order = 15, TypeName = "timestamp with local time zone")]
        [Display(Name = "Timestampltzcol 3")]
        public System.DateTime? Timestampltzcol3 { get; set; } // TIMESTAMPLTZCOL3

        public TypeDateTable()
        {
            Datedefaultcol = System.DateTime.Now;
            Timestampdefaultcol = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // TYPE_NUM_TABLE
    [Table("TYPE_NUM_TABLE", Schema = "EFPOCO")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TypeNumTable
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PK", Order = 1, TypeName = "number")]
        [Index(@"SYS_C0026054", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Pk")]
        public long Pk { get; set; } // PK (Primary key)

        [Column(@"DECCOL", Order = 2, TypeName = "number")]
        [Display(Name = "Deccol")]
        public decimal? Deccol { get; set; } // DECCOL

        [Column(@"DECCOL2", Order = 3, TypeName = "number")]
        [Display(Name = "Deccol 2")]
        public decimal? Deccol2 { get; set; } // DECCOL2

        [Column(@"DECDEFAULTCOL", Order = 4, TypeName = "number")]
        [Display(Name = "Decdefaultcol")]
        public decimal? Decdefaultcol { get; set; } // DECDEFAULTCOL

        [Column(@"DECDEFAULT2COL", Order = 5, TypeName = "number")]
        [Display(Name = "Decdefault 2 col")]
        public decimal? Decdefault2Col { get; set; } // DECDEFAULT2COL

        [Column(@"DECDEFAULT3COL", Order = 6, TypeName = "number")]
        [Display(Name = "Decdefault 3 col")]
        public decimal? Decdefault3Col { get; set; } // DECDEFAULT3COL

        [Column(@"DECIMALCOL", Order = 7, TypeName = "number")]
        [Display(Name = "Decimalcol")]
        public decimal? Decimalcol { get; set; } // DECIMALCOL

        [Column(@"DECIMALCOL2", Order = 8, TypeName = "number")]
        [Display(Name = "Decimalcol 2")]
        public decimal? Decimalcol2 { get; set; } // DECIMALCOL2

        [Column(@"DOUBLEPRECISIONCOL", Order = 9, TypeName = "float")]
        [Display(Name = "Doubleprecisioncol")]
        public decimal? Doubleprecisioncol { get; set; } // DOUBLEPRECISIONCOL

        [Column(@"FLOATCOL", Order = 10, TypeName = "float")]
        [Display(Name = "Floatcol")]
        public decimal? Floatcol { get; set; } // FLOATCOL

        [Column(@"INTCOL", Order = 11, TypeName = "number")]
        [Display(Name = "Intcol")]
        public decimal? Intcol { get; set; } // INTCOL

        [Column(@"INTEGERCOL", Order = 12, TypeName = "number")]
        [Display(Name = "Integercol")]
        public decimal? Integercol { get; set; } // INTEGERCOL

        [Column(@"NUMBERCOL", Order = 13, TypeName = "number")]
        [Display(Name = "Numbercol")]
        public decimal? Numbercol { get; set; } // NUMBERCOL

        [Column(@"NUMBERDEFAULTCOL", Order = 14, TypeName = "number")]
        [Display(Name = "Numberdefaultcol")]
        public decimal? Numberdefaultcol { get; set; } // NUMBERDEFAULTCOL

        [Column(@"NUMBERDEFAULT2COL", Order = 15, TypeName = "number")]
        [Display(Name = "Numberdefault 2 col")]
        public decimal? Numberdefault2Col { get; set; } // NUMBERDEFAULT2COL

        [Column(@"NUMBERDEFAULT3COL", Order = 16, TypeName = "number")]
        [Display(Name = "Numberdefault 3 col")]
        public decimal? Numberdefault3Col { get; set; } // NUMBERDEFAULT3COL

        [Column(@"NUMBERFCOL", Order = 17, TypeName = "number")]
        [Display(Name = "Numberfcol")]
        public decimal? Numberfcol { get; set; } // NUMBERFCOL

        [Column(@"NUMERICCOL", Order = 18, TypeName = "number")]
        [Display(Name = "Numericcol")]
        public decimal? Numericcol { get; set; } // NUMERICCOL

        [Column(@"NUMERICFCOL", Order = 19, TypeName = "number")]
        [Display(Name = "Numericfcol")]
        public decimal? Numericfcol { get; set; } // NUMERICFCOL

        [Column(@"REALCOL", Order = 20, TypeName = "float")]
        [Display(Name = "Realcol")]
        public decimal? Realcol { get; set; } // REALCOL

        [Column(@"SMALLINTCOL", Order = 21, TypeName = "number")]
        [Display(Name = "Smallintcol")]
        public decimal? Smallintcol { get; set; } // SMALLINTCOL

        [Column(@"NUMBER1COL", Order = 22, TypeName = "number")]
        [Display(Name = "Number 1 col")]
        public short? Number1Col { get; set; } // NUMBER1COL

        [Column(@"NUMBER1COL2", Order = 23, TypeName = "number")]
        [Display(Name = "Number 1 col 2")]
        public short? Number1Col2 { get; set; } // NUMBER1COL2

        [Column(@"NUMBER2COL", Order = 24, TypeName = "number")]
        [Display(Name = "Number 2 col")]
        public short? Number2Col { get; set; } // NUMBER2COL

        [Column(@"NUMBER3COL", Order = 25, TypeName = "number")]
        [Display(Name = "Number 3 col")]
        public short? Number3Col { get; set; } // NUMBER3COL

        [Column(@"NUMBER4COL", Order = 26, TypeName = "number")]
        [Display(Name = "Number 4 col")]
        public short? Number4Col { get; set; } // NUMBER4COL

        [Column(@"NUMBER4COL2", Order = 27, TypeName = "number")]
        [Display(Name = "Number 4 col 2")]
        public short? Number4Col2 { get; set; } // NUMBER4COL2

        [Column(@"NUMBER5COL", Order = 28, TypeName = "number")]
        [Display(Name = "Number 5 col")]
        public int? Number5Col { get; set; } // NUMBER5COL

        [Column(@"NUMBER5COL2", Order = 29, TypeName = "number")]
        [Display(Name = "Number 5 col 2")]
        public int? Number5Col2 { get; set; } // NUMBER5COL2

        [Column(@"NUMBER6COL", Order = 30, TypeName = "number")]
        [Display(Name = "Number 6 col")]
        public int? Number6Col { get; set; } // NUMBER6COL

        [Column(@"NUMBER7COL", Order = 31, TypeName = "number")]
        [Display(Name = "Number 7 col")]
        public int? Number7Col { get; set; } // NUMBER7COL

        [Column(@"NUMBER8COL", Order = 32, TypeName = "number")]
        [Display(Name = "Number 8 col")]
        public int? Number8Col { get; set; } // NUMBER8COL

        [Column(@"NUMBER9COL", Order = 33, TypeName = "number")]
        [Display(Name = "Number 9 col")]
        public int? Number9Col { get; set; } // NUMBER9COL

        [Column(@"NUMBER10COL", Order = 34, TypeName = "number")]
        [Display(Name = "Number 10 col")]
        public long? Number10Col { get; set; } // NUMBER10COL

        [Column(@"NUMBER10COL2", Order = 35, TypeName = "number")]
        [Display(Name = "Number 10 col 2")]
        public long? Number10Col2 { get; set; } // NUMBER10COL2

        [Column(@"NUMBER11COL", Order = 36, TypeName = "number")]
        [Display(Name = "Number 11 col")]
        public long? Number11Col { get; set; } // NUMBER11COL

        [Column(@"NUMBER11COL2", Order = 37, TypeName = "number")]
        [Display(Name = "Number 11 col 2")]
        public long? Number11Col2 { get; set; } // NUMBER11COL2

        [Column(@"NUMBER12COL", Order = 38, TypeName = "number")]
        [Display(Name = "Number 12 col")]
        public long? Number12Col { get; set; } // NUMBER12COL

        [Column(@"NUMBER13COL", Order = 39, TypeName = "number")]
        [Display(Name = "Number 13 col")]
        public long? Number13Col { get; set; } // NUMBER13COL

        [Column(@"NUMBER14COL", Order = 40, TypeName = "number")]
        [Display(Name = "Number 14 col")]
        public long? Number14Col { get; set; } // NUMBER14COL

        [Column(@"NUMBER15COL", Order = 41, TypeName = "number")]
        [Display(Name = "Number 15 col")]
        public long? Number15Col { get; set; } // NUMBER15COL

        [Column(@"NUMBER16COL", Order = 42, TypeName = "number")]
        [Display(Name = "Number 16 col")]
        public long? Number16Col { get; set; } // NUMBER16COL

        [Column(@"NUMBER17COL", Order = 43, TypeName = "number")]
        [Display(Name = "Number 17 col")]
        public long? Number17Col { get; set; } // NUMBER17COL

        [Column(@"NUMBER18COL", Order = 44, TypeName = "number")]
        [Display(Name = "Number 18 col")]
        public long? Number18Col { get; set; } // NUMBER18COL

        [Column(@"NUMBER19COL", Order = 45, TypeName = "number")]
        [Display(Name = "Number 19 col")]
        public long? Number19Col { get; set; } // NUMBER19COL

        [Column(@"NUMBER19COL2", Order = 46, TypeName = "number")]
        [Display(Name = "Number 19 col 2")]
        public long? Number19Col2 { get; set; } // NUMBER19COL2

        [Column(@"NUMBER20COL", Order = 47, TypeName = "number")]
        [Display(Name = "Number 20 col")]
        public decimal? Number20Col { get; set; } // NUMBER20COL

        [Column(@"NUMBER20COL2", Order = 48, TypeName = "number")]
        [Display(Name = "Number 20 col 2")]
        public decimal? Number20Col2 { get; set; } // NUMBER20COL2

        [Column(@"NUMBER21COL", Order = 49, TypeName = "number")]
        [Display(Name = "Number 21 col")]
        public decimal? Number21Col { get; set; } // NUMBER21COL

        [Column(@"NUMBER22COL", Order = 50, TypeName = "number")]
        [Display(Name = "Number 22 col")]
        public decimal? Number22Col { get; set; } // NUMBER22COL

        [Column(@"NUMBER23COL", Order = 51, TypeName = "number")]
        [Display(Name = "Number 23 col")]
        public decimal? Number23Col { get; set; } // NUMBER23COL

        [Column(@"NUMBER24COL", Order = 52, TypeName = "number")]
        [Display(Name = "Number 24 col")]
        public decimal? Number24Col { get; set; } // NUMBER24COL

        [Column(@"NUMBER25COL", Order = 53, TypeName = "number")]
        [Display(Name = "Number 25 col")]
        public decimal? Number25Col { get; set; } // NUMBER25COL

        public TypeNumTable()
        {
            Decdefaultcol = 10.0m;
            Decdefault2Col = 10.0m;
            Decdefault3Col = 10.0m;
            Numberdefaultcol = 1m;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    #endregion

    #region POCO Configuration

    // COUNTRIES
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class CountRyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CountRy>
    {
        public CountRyConfiguration()
            : this("HR")
        {
        }

        public CountRyConfiguration(string schema)
        {
            Property(x => x.CountryId).IsFixedLength().IsUnicode(false);
            Property(x => x.CountryName).IsOptional().IsUnicode(false);
            Property(x => x.RegionId).IsOptional();

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // DEPARTMENTS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class DepartmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Department>
    {
        public DepartmentConfiguration()
            : this("HR")
        {
        }

        public DepartmentConfiguration(string schema)
        {
            Property(x => x.DepartmentName).IsUnicode(false);
            Property(x => x.ManagerId).IsOptional();
            Property(x => x.LocationId).IsOptional();

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // EMPLOYEES
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class EmployeeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Employee>
    {
        public EmployeeConfiguration()
            : this("HR")
        {
        }

        public EmployeeConfiguration(string schema)
        {
            Property(x => x.FirstName).IsOptional().IsUnicode(false);
            Property(x => x.LastName).IsUnicode(false);
            Property(x => x.Email).IsUnicode(false);
            Property(x => x.PhoneNumber).IsOptional().IsUnicode(false);
            Property(x => x.JobId).IsUnicode(false);
            Property(x => x.Salary).IsOptional().HasPrecision(8,2);
            Property(x => x.CommissionPct).IsOptional().HasPrecision(2,2);
            Property(x => x.ManagerId).IsOptional();
            Property(x => x.DepartmentId).IsOptional();

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // JOBS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class JobConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Job>
    {
        public JobConfiguration()
            : this("HR")
        {
        }

        public JobConfiguration(string schema)
        {
            Property(x => x.JobId).IsUnicode(false);
            Property(x => x.JobTitle).IsUnicode(false);
            Property(x => x.MinSalary).IsOptional();
            Property(x => x.MaxSalary).IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // JOB_HISTORY
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class JobHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<JobHistory>
    {
        public JobHistoryConfiguration()
            : this("HR")
        {
        }

        public JobHistoryConfiguration(string schema)
        {
            Property(x => x.JobId).IsUnicode(false);
            Property(x => x.DepartmentId).IsOptional();

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // LOCATIONS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class LocationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Location>
    {
        public LocationConfiguration()
            : this("HR")
        {
        }

        public LocationConfiguration(string schema)
        {
            Property(x => x.StreetAddress).IsOptional().IsUnicode(false);
            Property(x => x.PostalCode).IsOptional().IsUnicode(false);
            Property(x => x.City).IsUnicode(false);
            Property(x => x.StateProvince).IsOptional().IsUnicode(false);
            Property(x => x.CountryId).IsOptional().IsFixedLength().IsUnicode(false);

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // REGIONS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class RegionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Region>
    {
        public RegionConfiguration()
            : this("HR")
        {
        }

        public RegionConfiguration(string schema)
        {
            Property(x => x.RegionName).IsOptional().IsUnicode(false);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // TYPE_CHAR_TABLE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TypeCharTableConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TypeCharTable>
    {
        public TypeCharTableConfiguration()
            : this("EFPOCO")
        {
        }

        public TypeCharTableConfiguration(string schema)
        {
            Property(x => x.Charcol).IsOptional().IsFixedLength().IsUnicode(false);
            Property(x => x.Charvaryingcol).IsOptional().IsUnicode(false);
            Property(x => x.Charactercol).IsOptional().IsFixedLength().IsUnicode(false);
            Property(x => x.Charactervaryingcol).IsOptional().IsUnicode(false);
            Property(x => x.Nationalcharvarying).IsOptional();
            Property(x => x.Nationalcharactervaryingcol).IsOptional();
            Property(x => x.Ncharcol).IsOptional().IsFixedLength();
            Property(x => x.Ncharvaryingcol).IsOptional();
            Property(x => x.Nvarchar2Col).IsOptional();
            Property(x => x.Varcharcol).IsOptional().IsUnicode(false);
            Property(x => x.Varchar2Col).IsOptional().IsUnicode(false);
            Property(x => x.Varchar2Defaultcol).IsOptional().IsUnicode(false);
            Property(x => x.Varchar2Default2Col).IsOptional().IsUnicode(false);
            Property(x => x.Varchar2Default3Col).IsOptional().IsUnicode(false);
            Property(x => x.Varchar2Default4Col).IsOptional().IsUnicode(false);
            Property(x => x.Varchar2Default5Col).IsOptional().IsUnicode(false);
            Property(x => x.Varchar2Default6Col).IsOptional().IsUnicode(false);
            Property(x => x.Clobcol).IsOptional();
            Property(x => x.Clobdefaultcol).IsOptional();
            Property(x => x.Nclobcol).IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // TYPE_DATE_TABLE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TypeDateTableConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TypeDateTable>
    {
        public TypeDateTableConfiguration()
            : this("EFPOCO")
        {
        }

        public TypeDateTableConfiguration(string schema)
        {
            Property(x => x.Datecol).IsOptional();
            Property(x => x.Datedefaultcol).IsOptional();
            Property(x => x.Datedefault2Col).IsOptional();
            Property(x => x.Timestampcol).IsOptional();
            Property(x => x.Timestampdefaultcol).IsOptional();
            Property(x => x.Timestampdefault2Col).IsOptional();
            Property(x => x.Timestampcol2).IsOptional();
            Property(x => x.Timestampcol3).IsOptional();
            Property(x => x.Timestamptzcol).IsOptional();
            Property(x => x.Timestamptzcol2).IsOptional();
            Property(x => x.Timestamptzcol3).IsOptional();
            Property(x => x.Timestampltzzcol).IsOptional();
            Property(x => x.Timestampltzcol2).IsOptional();
            Property(x => x.Timestampltzcol3).IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // TYPE_NUM_TABLE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class TypeNumTableConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TypeNumTable>
    {
        public TypeNumTableConfiguration()
            : this("EFPOCO")
        {
        }

        public TypeNumTableConfiguration(string schema)
        {
            Property(x => x.Deccol).IsOptional().HasPrecision(38,0);
            Property(x => x.Deccol2).IsOptional().HasPrecision(38,10);
            Property(x => x.Decdefaultcol).IsOptional().HasPrecision(38,10);
            Property(x => x.Decdefault2Col).IsOptional().HasPrecision(38,10);
            Property(x => x.Decdefault3Col).IsOptional().HasPrecision(38,10);
            Property(x => x.Decimalcol).IsOptional().HasPrecision(38,0);
            Property(x => x.Decimalcol2).IsOptional().HasPrecision(38,10);
            Property(x => x.Doubleprecisioncol).IsOptional().HasPrecision(126,0);
            Property(x => x.Floatcol).IsOptional().HasPrecision(126,0);
            Property(x => x.Intcol).IsOptional();
            Property(x => x.Integercol).IsOptional();
            Property(x => x.Numbercol).IsOptional().HasPrecision(38,0);
            Property(x => x.Numberdefaultcol).IsOptional().HasPrecision(38,0);
            Property(x => x.Numberdefault2Col).IsOptional().HasPrecision(38,0);
            Property(x => x.Numberdefault3Col).IsOptional().HasPrecision(38,0);
            Property(x => x.Numberfcol).IsOptional();
            Property(x => x.Numericcol).IsOptional().HasPrecision(38,0);
            Property(x => x.Numericfcol).IsOptional();
            Property(x => x.Realcol).IsOptional().HasPrecision(63,0);
            Property(x => x.Smallintcol).IsOptional();
            Property(x => x.Number1Col).IsOptional();
            Property(x => x.Number1Col2).IsOptional();
            Property(x => x.Number2Col).IsOptional();
            Property(x => x.Number3Col).IsOptional();
            Property(x => x.Number4Col).IsOptional();
            Property(x => x.Number4Col2).IsOptional();
            Property(x => x.Number5Col).IsOptional();
            Property(x => x.Number5Col2).IsOptional();
            Property(x => x.Number6Col).IsOptional();
            Property(x => x.Number7Col).IsOptional();
            Property(x => x.Number8Col).IsOptional();
            Property(x => x.Number9Col).IsOptional();
            Property(x => x.Number10Col).IsOptional();
            Property(x => x.Number10Col2).IsOptional();
            Property(x => x.Number11Col).IsOptional();
            Property(x => x.Number11Col2).IsOptional();
            Property(x => x.Number12Col).IsOptional();
            Property(x => x.Number13Col).IsOptional();
            Property(x => x.Number14Col).IsOptional();
            Property(x => x.Number15Col).IsOptional();
            Property(x => x.Number16Col).IsOptional();
            Property(x => x.Number17Col).IsOptional();
            Property(x => x.Number18Col).IsOptional();
            Property(x => x.Number19Col).IsOptional();
            Property(x => x.Number19Col2).IsOptional();
            Property(x => x.Number20Col).IsOptional().HasPrecision(20,0);
            Property(x => x.Number20Col2).IsOptional().HasPrecision(20,0);
            Property(x => x.Number21Col).IsOptional().HasPrecision(21,0);
            Property(x => x.Number22Col).IsOptional().HasPrecision(22,0);
            Property(x => x.Number23Col).IsOptional().HasPrecision(23,0);
            Property(x => x.Number24Col).IsOptional().HasPrecision(24,0);
            Property(x => x.Number25Col).IsOptional().HasPrecision(25,0);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    #endregion

}
// </auto-generated>

